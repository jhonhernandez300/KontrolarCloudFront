{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang3082{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset1 Cambria Math;}{\f2\fnil\fcharset0 Cambria Math;}}
{\colortbl ;\red255\green255\blue0;\red0\green255\blue0;\red0\green77\blue187;\red155\green0\blue211;\red255\green0\blue0;\red0\green176\blue80;}
{\*\generator Riched20 10.0.22621}{\*\mmathPr\mmathFont1\mwrapIndent1440 }\viewkind4\uc1 
\pard\sl240\slmult1\qc\f0\fs32\lang10 NOTAS Y ERRORES DEL FRONT DE KONTROLAR CLOUD\fs22\par

\pard\sl240\slmult1\par
1\par

\pard\sa200\sl240\slmult1 ////////////////////            1\par

\pard\sl240\slmult1\b Q tengo instalado?\b0\par
Angular CLI: 17.0.0\par
Node: 20.14.0\par
Package Manager: npm 10.7.0\par
\par
////////////////////////           1\par
\par
\b Como saber qu\'e9 versi\'f3n de Angular tengo?\b0\par
ng version\par
\par
///////////////////////////            1\par
\par
\b Como llenar un dropdown?\par
\b0 Seleccionar los company names\par
Usar el primer company name para llenar por defecto el dropdown\par
Dejar los demas company names como opciones\par
\par
companyNames: string[] = [];\par
  selectedCompany: string;\par
\par
this.\ul companyNames \ulnone = response.map((company: any) => company.companyName);\par
if (this.\ul companyNames\ulnone .length > 0) \{\par
            this.\highlight1 selectedCompany \highlight0 = this.\ul companyNames\ulnone [0];\par
\}\par
\par
<div class="mb-3">\par
  <label for="companyName" class="form-label">Nombre de la Compa\'f1\'eda</label>\par
  <select class="form-control" \par
\tab id="companyName" \par
\tab [(ngModel)]="\highlight1 selectedCompany\highlight0 " \par
\tab [disabled]="!\ul companyNames\ulnone .length"\par
>\par
\tab <option *ngFor="let companyName of \ul companyNames\ulnone " [value]="companyName">\tab\tab\{\{ companyName \}\}\par
\tab </option>\par
  </select>\par
</div>\par
\par
///////////////////          1\par
\par
\b Uso de ViewChild\par
\b0 @ViewChild('passwordInput', \{ static: false \}) passwordInput: ElementRef | null = null;\par
\par
Usa el decorador @ViewChild con \{ static: false \} para asegurarse de que el elemento solo sea referenciado despu\'e9s de que el componente se haya inicializado completamente.\par
\par
Aseg\'farate de que el campo de contrase\'f1a tenga el atributo #passwordInput para que pueda ser referenciado por ViewChild.\par
\par
Se utiliza para obtener una referencia a un componente, directiva o elemento DOM en la plantilla. Esto puede ser \'fatil cuando necesitas interactuar con elementos del DOM o componentes hijos directamente en tu clase de componente.\par
\par
Crea un componente hijo al que te referir\'e1s desde el componente padre.\par
ng generate component child\par
\par
En el archivo child.component.ts, define una propiedad y un m\'e9todo:\par
import \{ Component \} from '@angular/core';\par
\par
@Component(\{\par
  selector: 'app-child',\par
  templateUrl: './child.component.html',\par
  styleUrls: ['./child.component.css']\par
\})\par
export class ChildComponent \{\par
  message: string = 'Hello from the child component!';\par
\par
  showMessage() \{\par
    alert(this.message);\par
  \}\par
\}\par
\par
En el archivo child.component.html:\par
<p>\{\{ message \}\}</p>\par
<button (click)="showMessage()">Show Message</button>\par
\par
En el componente padre refi\'e9rete al componente hijo utilizando ViewChild\par
// app.component.ts\par
import \{ Component, ViewChild, AfterViewInit \} from '@angular/core';\par
import \{ ChildComponent \} from './child/child.component';\par
\par
@Component(\{\par
  selector: 'app-root',\par
  templateUrl: './app.component.html',\par
  styleUrls: ['./app.component.css']\par
\})\par
export class AppComponent implements AfterViewInit \{\par
  @ViewChild(ChildComponent) childComponent!: ChildComponent;\par
\par
  ngAfterViewInit() \{\par
    // Puedes acceder a las propiedades y m\'e9todos del componente hijo aqu\'ed\par
    console.log(this.childComponent.message);\par
  \}\par
\par
  callChildMethod() \{\par
    this.childComponent.showMessage();\par
  \}\par
\}\par
\par
En app.component.html:\par
<app-child></app-child>\par
<button (click)="callChildMethod()">Call Child Method</button>\par
\par
//////////////////////          1\par
\par
\b Activar bot\'f3n\par
\b0 <button type="submit" class="btn btn-primary w-100" [disabled]="!\ul isCompanySelected\ulnone ">Iniciar Sesi\'f3n</button>\par
\par
\ul isCompanySelected\ulnone : boolean = false;\par
\par
Cuando el servicio devuelve datos:\par
this.\ul isCompanySelected \ulnone = true;\par
\par
////////////////////////////        1\par
\par
\b Convertir a texto\b0\par
this.documentNumber.toString()\par
\par
///////////////////////////         1\par
\par
\b Mostrar un cuadro de di\'e1logo\b0\par
<input type="text" \par
\tab class="form-control" \par
\tab id="documentNumber" \par
\tab name="documentNumber"\par
              placeholder="Ej. 71789632" \par
\tab [(ngModel)]="\ul documentNumber\ulnone "\par
>\par
\par
<!-- Modal -->\par
<div class="modal fade" id="\b errorModal\b0 " tabindex="-1" aria-labelledby="errorModalLabel" aria-hidden="true">\par
    <div class="modal-dialog">\par
      <div class="modal-content">\par
        <div class="modal-header">\par
          <h5 class="modal-title" id="errorModalLabel">Error</h5>\par
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>\par
        </div>\par
        <div class="modal-body">\par
          \{\{ \highlight1 modalMessage \highlight0\}\}\par
        </div>\par
        <div class="modal-footer">\par
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>\par
        </div>\par
      </div>\par
    </div>\par
  </div>\par
\par
En el ts\par
import * as bootstrap from 'bootstrap';\par
\par
modalMessage: string = '';\par
\par
\ul documentNumber\ulnone : number = 0;\par
\par
Evento del bot\'f3n\par
if (!this.\ul documentNumber\ulnone ) \{\par
this.showModal('N\'famero de documento no puede estar vac\'edo');\par
\par
showModal(message: string): void \{\par
    this.\highlight1 modalMessage \highlight0 = message;\par
    const modalElement = document.getElementById('\b errorModal\b0 ');\par
\par
    if (modalElement) \{\par
      const modal = new bootstrap.Modal(modalElement);\par
      modal.show();\par
    \} else \{\par
      console.error('No se encontr\'f3 el elemento modal con id "errorModal".');\par
    \}\par
  \}\par
\par
//////////////////////////        1\par
\par
\b Encriptar y desencriptar\b0\par
npm install crypto-js\par
\par
import * as CryptoJS from 'crypto-js';\par
\par
export class \highlight2 CryptoHelper\highlight0  \{\par
  private static readonly Key = CryptoJS.enc.Utf8.parse('1234567890123456'); // 16 bytes\par
  private static readonly Iv = CryptoJS.enc.Utf8.parse('1234567890123456'); // 16 bytes\par
\par
  static \cf3\b encrypt\cf0\b0 (data: any): string \{\par
    const \b jsonData \b0 = JSON.stringify(data);\par
    const \ul encryptedData \ulnone = CryptoJS.AES.encrypt(\par
\tab\b jsonData\b0 , \par
\tab CryptoHelper.Key, \par
\tab\{ iv: CryptoHelper.Iv \}\par
    ).toString();\par
    return \ul encryptedData\ulnone ;\par
  \}\par
\par
  static \cf4\b decrypt\cf0\b0 (\highlight1 encryptedData\highlight0 : string): any \{\par
    const bytes = CryptoJS.AES.decrypt(\par
\tab\highlight1 encryptedData\highlight0 , \par
\tab CryptoHelper.Key, \par
\tab\{ iv: CryptoHelper.Iv \}\par
    );\par
    const decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\par
    return decryptedData;\par
  \}\par
\}\par
\par
En el servicio:\par
GetCompaniesByDocumentNumber(documentNumber: number): Observable<any> \{\par
    const encryptedDocumentNumber = \highlight2 CryptoHelper\highlight0 .\cf3\b encrypt\cf0\b0 (\par
      documentNumber.toString()\par
    );\par
    //console.log("encryptedDocumentNumber ", encryptedDocumentNumber);\par
    return this.http\par
      .get(\par
        `$\{this.apiUrl\}/GetCompaniesByDocumentNumber/$\{encodeURIComponent(\par
          encryptedDocumentNumber\par
        )\}`,\par
        \{ responseType: 'text' \}\par
      )\par
      .pipe(\par
        map((encryptedData) => \{\par
          //console.log("encryptedData ", encryptedData);\par
          return \highlight2 CryptoHelper\highlight0 .\cf4\b decrypt\cf0\b0 (encryptedData);\par
        \})\par
      );\par
  \}\par
\par
//////////////////////////      1\par
\par
\b Mostrar modal luego de validaci\'f3n\par
\b0 En el componente:\par
handleConsultCompanies(): void \{\par
  const numberPattern = /^\\d+$/;\par
\par
  if (!this.documentNumber) \{\par
    this.\cf5\b showModal\cf0\b0 ('N\'famero de documento no puede estar vac\'edo');\par
    return;\par
  \} else if (!numberPattern.test(this.documentNumber.toString())) \{   \par
    this.\cf5\b showModal\cf0\b0 ('N\'famero de documento debe contener solo n\'fameros');\par
    return;\par
  \}\par
\par
/////////////////////            1\par
\par
\b Como guardar en el localStorage\par
\b0 Crear un servicio y ah\'ed poner:\par
 \highlight1 setData\highlight0 (key: string, data: any): void \{\par
    \cf5\b localStorage\cf0\b0 .setItem(key, JSON.stringify(data));    \par
  \}\par
  \par
  getData(key: string): any \{\par
    const data = \cf5\b localStorage\cf0\b0 .getItem(key);\par
    return data ? JSON.parse(data) : null;    \par
  \}\par
\par
  removeData(key: string): void \{\par
    \cf5\b localStorage\cf0\b0 .removeItem(key);\par
  \}\par
\par
  removeAllData(): void \{\par
    \cf5\b localStorage\cf0\b0 .clear();\par
  \}\par
\par
  isEmpty(): boolean \{\par
    return \cf5\b localStorage\cf0\b0 .length === 0;\par
  \}\par
\par
En el componente:\par
import \{ LocalStorageService \} from '../../helpers/local-storage.service';\par
\par
constructor(\par
\tab private localStorageService: LocalStorageService\par
) \{\}\par
\par
this.localStorageService.\highlight1 setData\highlight0 ('token', this.token);\par
\par
///////////////////////      1\par
\par
\b Implementar el authguard\par
\cf6 En el componente:\par
\cf0\b0 handleLogin(): void \{    \par
    if (!this.password) \{\par
      this.showModal('El password de la compa\'f1\'eda no puede estar vac\'edo');\par
      return;\par
    \}else if (this.password === this.companyPassword) \{\par
      this.getToken();\par
      this.localStorageService.setData('token', this.token);\par
      const currentDate = new Date();\par
      const dateString = currentDate.toISOString();        \par
      localStorage.setItem('last date', dateString);\par
      this.router.navigate(['/bienvenido']);\par
    \} else \{\par
      this.showModal('Contrase\'f1a incorrecta. Verifica tus credenciales.');\par
    \}    \par
  \}\par
\par
El guard se genera as\'ed:\par
ng generate guard guards/auth\par
\par
\cf6\b auth.guard.ts\par
\cf0\b0 import \{ CanActivateChildFn, CanActivateFn \} from '@angular/router';\par
import \{ Injectable, inject \} from '@angular/core';\par
import \{ CanActivate, Router \} from '@angular/router';\par
import \{ UserService \} from '../services/user/user.service';\par
import \{ CanActivateChild, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree \} from '@angular/router';\par
import \{ Observable, throwError \} from 'rxjs';\par
import \{ catchError, map \} from 'rxjs/operators';\par
\par
export const canActivateGuard: CanActivateFn = (  \par
  route: ActivatedRouteSnapshot,\par
  state: RouterStateSnapshot\par
) => \{   \par
  if(inject(UserService).\ul IsAuthenticated\ulnone ())\{\par
    return true;\par
  \}else \{\par
    inject(Router).navigate(['/login']);\par
    return false;\par
  \}\par
\}; \par
\par
\cf6\b El servicio\cf0\b0\par
import \{ Injectable \} from '@angular/core';\par
import \{ Observable \} from 'rxjs';\par
import \{ HttpClient, HttpHeaders \} from '@angular/common/http';\par
import \{ iCompany \} from '../../models/iCompany';\par
import \{ map \} from 'rxjs/operators';\par
import \{ CryptoHelper \} from '../../helpers/CryptoHelper';\par
\par
\ul IsAuthenticated\ulnone (): boolean\{  \par
    const lastDate = localStorage.getItem('last date');      \par
    console.log("lastDate ", lastDate);\par
\par
    if (lastDate === null) \{   \par
      this.lastDate = new Date(1900, 0, 1, 0, 0, 0); \par
    \}else \{\par
      this.lastDate = new Date(lastDate);\par
    \}  \par
  \par
    const fechaHoraActual = new Date();\par
    const diferenciaMs = this.lastDate.getTime() - this.fechaHoraActual.getTime(); \par
       \par
      // Convertir la diferencia de milisegundos a minutos\par
    const diferenciaMinutos = diferenciaMs / (1000 * 60);  \par
\par
      // Comprobar si la diferencia es mayor a 20 minutos\par
    if((-1 * diferenciaMinutos) > 20)  \{\par
      return false;\par
    \}else\{\par
      return true;\par
    \}    \par
  \}\par
\par
\cf6\b app.module\cf0\b0\par
import \{ NgModule, isDevMode \} from '@angular/core';\par
import \{ BrowserModule \} from '@angular/platform-browser';\par
import \{ HttpClientModule \} from '@angular/common/http';\par
import \{ FormsModule \} from '@angular/forms';\par
\cf5\b import \{ HTTP_INTERCEPTORS \} from '@angular/common/http';\cf0\b0\par
\par
\cf5\b providers: [\{\par
    provide: HTTP_INTERCEPTORS,\par
    useClass: AuthInterceptor,\par
    multi: true\par
  \}],\par
\cf0\b0\par
\cf6\b authInterceptor.ts\cf0\b0\par
import \{ HttpEvent, HttpHandler, HttpInterceptor, HttpRequest \} from "@angular/common/http";\par
import \{ Injectable \} from "@angular/core";\par
import \{ Observable \} from "rxjs";\par
\par
@Injectable()\par
export class AuthInterceptor implements HttpInterceptor \{\par
    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> \{\par
        const token = localStorage.getItem("token");\par
\par
        if(token)\{\par
            const cloned = req.clone(\{\par
                //Alt 96\par
                setHeaders: \{Authorization: `Bearer $\{token\}`\}\par
            \});\par
            return next.handle(cloned);            \par
        \}\par
        else\par
        \{\par
            return next.handle(req);\par
        \}\par
    \}\par
\}\par
\par
\cf6\b app-routing.module\cf0\b0\par
import \{ RouterModule, Routes \} from '@angular/router';\par
import \{ canActivateGuard \} from '../app/helpers/auth.guard';\par
\par
const routes: Routes = [\par
  \{ path: 'bienvenido', \par
    component: BienvenidoComponent\cf5\b , \par
    canActivate: [canActivateGuard]\par
\cf0\b0   \},\par
\par
 exports: [RouterModule]\par
\par
////////////////////////////////////////          1\par
\par
\b Como traducir a otro idioma internationalization\b0\par
ng add @angular/localize\par
Y\par
\par
En angular.json > projects\par
"Nombre del proyecto": \{\par
"i18n": \{\par
"sourceLocale": "en-US",\par
"locales": \{\par
\tab "es-PR": "src/locale/messages.es.xlf"\par
\tab\}\par
\}\par
\par
O poner:\par
 "i18n": \{\par
        "sourceLocale": "es-CO",\par
        "locales": \{\par
          "en-US": "src/locale/messages.en.xlf"\par
        \}\par
      \},\par
\par
En architect > build > options\par
"localize": ["es-PR"],\par
\par
En el html poner\par
i18n\par
\{\{ "la fecha" | date\}\} o | currency\par
\par
En la consola:\par
ng extract-i18n --output-path src/locale\par
cp src/locale/messages.xlf src/locale/messages.es.xlf\par
\par
Abrir el archivo messages.es.xlf\par
Agregar <target> traducci\'f3n </target>\par
\par
//////////////////////////            1\par
\par
\b Traducir una aplicaci\'f3n internacionalizaci\'f3n\par
Usar un dropdown para los idiomas, disparar un evento para la traducci\'f3n\par
\b0 Instalar ngx-translate\par
\par
En Angular json\par
 "projects": \{\par
    "kontrolar-cloud-pwa": \{     \par
      "i18n": \{\par
        "sourceLocale": "es-CO",\par
        "locales": \{\par
          "en-US": "src/locale/messages.en.xlf",\par
          "pt-PT": "src/locale/messages.pt.xlf"\par
        \}\par
      \},\par
\par
"architect": \{\par
        "build": \{\par
          "builder": "@angular-devkit/build-angular:application",\par
          "options": \{\par
            "localize": ["es-CO", "en-US", "pt-PT"],\par
\par
En la carpeta assets crear la carpeta i18n y adentro los archivos para los idiomas, por ejemplo en-US.json o es-CO.json\par
Adentro poner\par
\{\par
    "CHANGE_COMPANY": "Change Company",\par
    "CHANGE_PASSWORD": "Change Password",\par
    "CLOSE": "Close",\par
    "CLOSE_SESSION": "Close Session",\par
    "COMPANY_NAME": "Company Name",\par
    "COMPANY_PASSWORD": "Company Password",\par
    "CONSULT_COMPANIES": "Consult Companies",\par
    "DOCUMENT_NUMBER": "Document Number",\par
    "ERROR": "Error",\par
\}\par
\par
app.module.ts\par
import \{ TranslateHttpLoader \} from '@ngx-translate/http-loader';\par
\par
export function HttpLoaderFactory(http: HttpClient) \{\par
  return new TranslateHttpLoader(http, './assets/i18n/', '.json');\par
\}\par
\par
En imports\par
TranslateModule.forRoot(\{\par
      loader: \{\par
        provide: TranslateLoader,\par
        useFactory: HttpLoaderFactory,\par
        deps: [HttpClient]\par
      \}\par
    \}),\par
\par
app.component.ts\par
import \{ LanguageChangeService \} from '../app/services/language-change-service'; \par
import \{ TranslateService \} from '@ngx-translate/core';\par
\par
constructor\par
private languageService: LanguageServiceService,\par
private languageChangeService: LanguageChangeService,\par
private translate: TranslateService\par
\par
setLanguage(event: Event) \{\par
    const selectElement = event.target as HTMLSelectElement;\par
    const language = selectElement.value;\par
    this.languageService.setLanguage(language);\par
    this.languageChangeService.changeLanguage(language); // Notifica el cambio de idioma\par
  \}\par
\par
  ngOnInit(): void \{\par
    this.translate.setDefaultLang('es-CO'); // Establece espa\'f1ol como idioma predeterminado\par
    this.translate.use('es-CO'); // Aseg\'fararse de usar el idioma espa\'f1ol al iniciar\par
    this.checkForUpdates();\par
    this.isAuthenticated = this.userService.IsAuthenticated();\par
    \par
    // Suscribirse a cambios de autenticaci\'f3n\par
    this.authService.authenticated$.subscribe(isAuthenticated => \{\par
      this.isAuthenticated = isAuthenticated;\par
    \});\par
  \}\par
\par
app.component.html\par
  <nav class="navbar navbar-expand-lg navbar-light bg-light">\par
        <div class="container-fluid">\par
          <div class="ms-auto">\par
            <select class="form-select" (change)="setLanguage($event)">\par
              <option value="es-CO">Espa\'f1ol</option>\par
              <option value="en-US">English</option>\par
              <option value="pt-PT">Portugu\'eas</option>\par
            </select>\par
          </div>\par
        </div>\par
      </nav>\par
\par
import \{ Injectable \} from '@angular/core';\par
import \{ Location \} from '@angular/common';\par
import \{ TranslateService \} from '@ngx-translate/core';\par
\par
@Injectable(\{\par
  providedIn: 'root'\par
\})\par
export class LanguageServiceService \{\par
\par
  constructor(private translate: TranslateService, private location: Location) \{    \par
  \}\par
\par
  setLanguage(language: string) \{\par
    //console.log("language al llegar al servicio ", language);\par
    this.translate.use(language).subscribe(() => \{\par
      this.location.replaceState(this.location.path(), '', \{ lang: language \});\par
    \});\par
  \}\par
\}\par
\par
import \{ Injectable \} from '@angular/core';\par
import \{ BehaviorSubject \} from 'rxjs';\par
\par
@Injectable(\{\par
  providedIn: 'root'\par
\})\par
export class LanguageChangeService \{\par
  private languageSource = new BehaviorSubject<string>('es-CO');\par
  currentLanguage = this.languageSource.asObservable();\par
\par
  changeLanguage(language: string) \{\par
    //console.log('language ', language);\par
    this.languageSource.next(language);\par
    //sconsole.log('this.languageSource ', this.languageSource);\par
  \}\par
\}\par
\par
En el componente a traducir\par
<li><a class="dropdown-item" href="#" translate><i class="bi bi-building"></i> CHANGE_COMPANY</a></li>\par
\par
<div class="selected-company">\{\{selectedCompany\}\}</div>\par
\par
ts\par
import \{ TranslateService \} from '@ngx-translate/core';\par
import \{ LanguageChangeService \} from '../../services/language-change-service';\par
\par
En el constructor\par
private translate: TranslateService,\par
private languageChangeService: LanguageChangeService\par
\par
En el ngOnInit\par
this.translateModulesAndOptions(); \par
\par
this.languageChangeService.currentLanguage.subscribe(language => \{      \par
      this.translateModulesAndOptions();\par
    \});\par
\par
translateModulesAndOptions(): void \{\par
    if (this.listaModulos && this.listaModulos.length > 0) \{\par
      this.listaModulos.forEach(modulo => \{\par
        const key = `$\{modulo.NameModule.toUpperCase()\}`;        \par
        this.translate.get(key).subscribe((translatedName: string) => \{\par
          if (translatedName !== key) \{\par
            modulo.NameModule = translatedName;\par
          \}\par
        \});\par
\par
        if (modulo.Options && modulo.Options.length > 0) \{\par
          modulo.Options.forEach(option => \{\par
            const optionKey = `$\{option.NameOption.toUpperCase()\}`;\par
            this.translate.get(optionKey).subscribe((translatedOptionName: string) => \{\par
              if (translatedOptionName !== optionKey) \{\par
                option.NameOption = translatedOptionName;\par
              \}\par
            \});\par
          \});\par
        \}\par
      \});\par
    \}\par
  \}\par
\par
////////////////                 1\par
\par
\b Crear un dropdown para los idiomas\par
\b0 Traducir\par
angular.json\par
"projects": \{\par
    "kontrolar-cloud-pwa": \{     \par
      \b "i18n": \{\par
        "sourceLocale": "es-CO",\par
        "locales": \{\par
          "en-US": "src/locale/messages.en.xlf",\par
          "pt-PT": "src/locale/messages.pt.xlf"\par
        \}\par
      \},\par
\b0 contin\'faa...\par
"architect": \{\par
        "build": \{\par
          "builder": "@angular-devkit/build-angular:application",\par
          "options": \{\par
         \b    "localize": ["es-CO", "en-US", "pt-PT"],\par
\b0\par
\cf6\b app.component.ts\cf0\b0\par
import \{ LanguageServiceService \} from '../app/services/language-service.service';\par
\par
 constructor(    \par
    private languageService: LanguageServiceService\par
  ) \{\}\par
\par
setLanguage(event: Event) \{\par
    const selectElement = event.target as HTMLSelectElement;\par
    const language = selectElement.value;\par
    this.languageService.setLanguage(language);\par
  \}\par
\par
\cf6\b app.component.html\cf0\b0\par
<nav class="navbar navbar-expand-lg navbar-light bg-light">\par
    <div class="container-fluid">\par
      <a class="navbar-brand" href="#">Mi Aplicaci\'f3n</a>\par
\par
      <div class="d-flex">\par
        <select class="form-select" (change)="setLanguage($event)">\par
          <option value="es-CO">Espa\'f1ol</option>\par
          <option value="en-US">English</option>\par
          <option value="pt-PT">Portugu\'eas</option>\par
        </select>\par
      </div>\par
\par
    </div>\par
</nav>\par
<div class="container">\par
    <router-outlet></router-outlet>\par
</div>\par
\par
\cf6\b language-service.service\cf0\b0\par
import \{ Injectable \} from '@angular/core';\par
import \{ Location \} from '@angular/common';\par
import \{ TranslateService \} from '@ngx-translate/core';\par
\par
@Injectable(\{\par
  providedIn: 'root'\par
\})\par
export class LanguageServiceService \{\par
\par
  constructor(private translate: TranslateService, private location: Location) \{\par
    this.translate.setDefaultLang('es-CO');\par
  \}\par
\par
  setLanguage(language: string) \{    \par
    this.translate.use(language).subscribe(() => \{\par
      this.location.replaceState(this.location.path(), '', \{ lang: language \});\par
    \});\par
  \}\par
\}\par
\par
\cf6\b login.component.html\cf0\b0\par
<div class="container d-flex justify-content-center align-items-center vh-100">\par
  <div class="card" style="width: 25rem;">\par
    <div class="card-body">\par
      <h5 translate class="card-title text-center">TITLE</h5>\par
      <form>\par
        <div class="mb-3 d-flex flex-column align-items-center">\par
          <label translate for="documentNumber" class="form-label">DOCUMENT_NUMBER</label>\par
          <div class="input-group">\par
            <input type="text" class="form-control" id="documentNumber" name="documentNumber"\par
                   placeholder="Ej. 71789632" [(ngModel)]="documentNumber">\par
          </div>\par
          <button translate class="btn btn-primary mt-2" (click)="handleConsultCompanies()">CONSULT_COMPANIES</button>\par
        </div>\par
\par
        <div class="mb-3">\par
          <label translate for="companyName" class="form-label">COMPANY_NAME</label>\par
          <select class="form-control" id="companyName" name="companyName"\par
                  [(ngModel)]="selectedCompany" [disabled]="!companyNames.length"\par
                  (change)="updateCompanyPassword()">\par
            <option *ngFor="let companyName of companyNames" [value]="companyName">\{\{ companyName \}\}</option>\par
          </select>\par
        </div>\par
\par
        <div class="mb-3" *ngIf="isCompanySelected">\par
          <label translate for="password" class="form-label">COMPANY_PASSWORD</label>\par
          <input type="password" class="form-control" id="password" name="password"\par
                 placeholder="Password" [(ngModel)]="password" #passwordInput>\par
        </div>\par
\par
        <button translate type="button" class="btn btn-primary w-100"\par
                [disabled]="!isCompanySelected" (click)="handleLogin()">LOGIN</button>\par
      </form>\par
      \par
    </div>\par
  </div>\par
</div>\par
\par
\cf6\b app.module.ts\cf0\b0\par
Despu\'e9s de los imports\par
export function HttpLoaderFactory(http: HttpClient) \{\par
  return new TranslateHttpLoader(http, './assets/i18n/', '.json');\par
\}\par
\par
En imports\par
TranslateModule.forRoot(\{\par
      loader: \{\par
        provide: TranslateLoader,\par
        useFactory: HttpLoaderFactory,\par
        deps: [HttpClient]\par
      \}\par
    \}),\par
\par
En la carpeta assets se crea la carpet i18n, adentro se ponen los archivos para los idiomas, este es el de espa\'f1ol\par
\{\par
    "TITLE": "Inicio de Sesi\'f3n",\par
    "DOCUMENT_NUMBER": "N\'famero de Documento",\par
    "CONSULT_COMPANIES": "Consultar Compa\'f1\'edas",\par
    "COMPANY_NAME": "Nombre de la Compa\'f1\'eda",\par
    "COMPANY_PASSWORD": "Password de la Compa\'f1\'eda",\par
    "LOGIN": "Iniciar Sesi\'f3n",\par
    "ERROR": "Error",\par
    "CLOSE": "Cerrar"\par
  \}\par
\par
En la consola\par
npm install @ngx-translate/core @ngx-translate/http-loader\par
\par
/////////////////////             1\par
\par
\b Traducir un componente con la infraestructura de traducci\'f3n ya lista\par
\b0 En el html\par
<h4>\{\{ 'USER_CODE' | translate \}\}</h4>\par
\par
En el ts\par
import \{ TranslateService \} from '@ngx-translate/core';\par
import \{ LanguageChangeService \} from '../../services/language-change-service';\par
\par
Constructor\par
    private translate: TranslateService,\par
    private languageChangeService: LanguageChangeService\par
\par
  ngOnInit(): void \{\par
    // Suscribirse a cambios de idioma\par
    this.languageChangeService.currentLanguage.subscribe(language => \{\par
      this.translate.use(language);\par
    \});\par
  \}\par
\par
En en-US.json\par
"CODIGO DEL USUARIO": "USER CODE",\par
"C\'d3DIGO DE USU\'c1RIO": "USER CODE",\par
"USER_CODE": "USER CODE",\par
\par
En es-CO.json\par
"C\'d3DIGO DE USU\'c1RIO": "CODIGO DEL USUARIO",\par
"USER_CODE": "CODIGO DEL USUARIO",\par
\par
En el html poner \{\{ 'TEXT_TO_TRANSLATE' | translate \}\}\par
\par
////////////////         1\par
\par
\b Como crear un helper y usarlo\par
\b0 export class \ul DateFormatter \ulnone\{\par
\par
    public \highlight1 formatDate\highlight0 (date: Date): string \{\par
        const year = date.getFullYear();\par
        const month = (date.getMonth() + 1).toString().padStart(2, '0');\par
        const day = date.getDate().toString().padStart(2, '0');\par
    \par
        return `$\{year\}-$\{month\}-$\{day\}`;\par
    \}\par
\}\par
\par
En el componente que lo usa:\par
const date = new Date(response[selectedCompanyIndex]['LicenseValidDate']);\par
const dateFormatter = new \ul DateFormatter\ulnone ();\par
this.licenseValidDate = dateFormatter.\highlight1 formatDate\highlight0 (date);\par
\par
////////////////         1\par
\par
\b C\'f3mo traducir los mensajes del modal\par
\b0 <!-- Modal -->\par
<div class="modal fade" id="errorModal" tabindex="-1" aria-labelledby="errorModalLabel" aria-hidden="true">\par
  <div class="modal-dialog">\par
    <div class="modal-content">\par
      <div class="modal-header">\par
        <h5 translate class="modal-title" id="errorModalLabel">ERROR</h5>\par
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>\par
      </div>\par
      <div translate class="modal-body">\par
        \{\{ \ul modalMessage \ulnone\}\}\par
      </div>\par
      <div class="modal-footer">\par
        <button translate type="button" class="btn btn-secondary" data-bs-dismiss="modal">CLOSE</button>\par
      </div>\par
    </div>\par
  </div>\par
</div>\par
\par
import \{ TranslateService \} from '@ngx-translate/core';\par
\par
En el constructor:\par
private translate: TranslateService\par
\par
private \highlight1 showModal\highlight0 (messageKey: string): void \{\par
    this.translate.get(messageKey).subscribe((translatedMessage: string) => \{\par
      this.\ul modalMessage \ulnone = translatedMessage;\par
      const modalElement = document.getElementById('errorModal');\par
\par
      if (modalElement) \{\par
        const modal = new bootstrap.Modal(modalElement);\par
        modal.show();\par
      \} else \{\par
        console.error('No se encontr\'f3 el elemento modal con id "errorModal".');\par
      \}\par
    \});\par
 \}\par
\par
this.\highlight1 showModal\highlight0 ('IDENTIFICATION_NUMBER_CANNOT_BE_EMPTY');\par
\par
En los archivos q est\'e1n en la ubicaci\'f3n assets > i18n (traducido para cada idioma en el lado derecho)\par
"IDENTIFICATION_NUMBER_CANNOT_BE_EMPTY":"Identification number cannot be empty"\par
\par
////////////////             1\par
\par
\b Determinar desde la bd el color de un bot\'f3n\par
Determinar en la bd el \'edcono\par
\b0 <button class="accordion-button collapsed \{\{ modulo.claseModulo \}\}" \par
          type="button" \par
          data-bs-toggle="collapse" \par
          [attr.data-bs-target]="'#collapse' + i" \par
          aria-expanded="false" \par
          [attr.aria-controls]="'collapse' + i"\par
          [ngStyle]="\{'background-color': modulo.colorModule\}"\par
        >\par
          <i [class]="modulo.iconoModulo"></i>      \par
          <span style="margin-left: 30px;">\{\{ modulo.nombreModulo \}\}</span>\par
</button>\par
\par
////////////////              2\par
\par
\b Como traducir un men\'fa seg\'fan lo q se escoja en el dropdown de otro componente\par
\b0 angular.json\par
"projects": \{\par
    "kontrolar-cloud-pwa": \{     \par
      "i18n": \{\par
        "sourceLocale": "es-CO",\par
        "locales": \{\par
          "en-US": "src/locale/messages.en.xlf",\par
          "pt-PT": "src/locale/messages.pt.xlf"\par
        \}\par
      \},\par
\par
"architect": \{\par
        "build": \{\par
          "builder": "@angular-devkit/build-angular:application",\par
          "options": \{\par
            "localize": ["es-CO", "en-US", "pt-PT"],\par
\par
instalar ngx translate\par
\par
En assets crear la carpeta i18n y adentro poner los archivos en-US.json, es-CO.json y pt-PT.json, el primero tiene:\par
\{\par
"IDENTIFICATION_NUMBER_MUST_HAVE_ONLY_NUMBERS": "O n\'famero de identifica\'e7\'e3o deve conter apenas n\'fameros",\par
  "INCORRECT_PASSWORD_VERIFY_YOUR_CREDENTIALS": "Senha incorreta verifique suas credenciais",\par
  "LOGIN": "Iniciar Sess\'e3o",\par
  "MODULES": \{\par
    "COMPRAS": "Compras",\par
    "PRODUCCION": "Produ\'e7\'e3o",\par
    "INVENTARIO": "Invent\'e1rio",\par
    "FACTURACION": "Fatura\'e7\'e3o",\par
    "TRANSPORTE": "Transporte",\par
    "CONSULTAS RAPIDAS": "Consultas R\'e1pidas",\par
    "MAESTROS": "Mestres",\par
    "CONFIGURACION TECNICA": "Configura\'e7\'e3o T\'e9cnica",\par
    "MOVIMIENTOS DE COMPRAS": "Movimentos de Compras",\par
    "CXP": "CXP",\par
    "CONTROL DE TIEMPOS DE PRODUCCION": "Controle de Tempo de Produ\'e7\'e3o",\par
    "DEVOLUCION CONTABILIZADO DOCUMENTOS": "Devolu\'e7\'e3o de Documentos Contabilizados",\par
    "CONFIGURAR PUNTOS REORDEN": "Configurar Pontos de Reordena\'e7\'e3o",\par
    "ADMINISTRAR PUNTOS RECORDEN": "Gerenciar Pontos de Reordena\'e7\'e3o",\par
    "DEVOLUCION CONTABILIZADO RECIBOS": "Devolu\'e7\'e3o de Recibos Contabilizados",\par
    "CANCELAR PEDIDOS": "Cancelar Pedidos",\par
    "PROGRAMAR TRANSPORTE": "Programar Transporte",\par
    "SEGUIMIENTO TRANSPORTE": "Acompanhamento de Transporte",\par
    "CAUSAS": "Causas",\par
    "CAMPOS ESPECIALES": "Campos Especiais",\par
    "CONSULTA INVENTARIO": "Consulta de Invent\'e1rio",\par
    "PURCHASES": "Compras",\par
    "PRODUCTION": "Produ\'e7\'e3o",\par
    "INVENTORY": "Invent\'e1rio",\par
    "BILLING": "Faturamento",\par
    "TRANSPORT": "Transporte",\par
    "QUICK QUERIES": "Consultas R\'e1pidas",\par
    "MASTERS": "Mestres",\par
    "TECHNICAL CONFIGURATION": "Configura\'e7\'e3o T\'e9cnica",\par
    "PURCHASE MOVEMENTS": "Movimentos de Compras",    \par
    "PRODUCTION TIME CONTROL": "Controle de Tempo de Produ\'e7\'e3o",\par
    "RETURN ACCOUNTED DOCUMENTS": "Devolu\'e7\'e3o de Documentos Contabilizados",\par
    "SET REORDER POINTS": "Definir Pontos de Reabastecimento",\par
    "MANAGE REORDER POINTS": "Gerenciar Pontos de Reabastecimento",\par
    "RETURN ACCOUNTED RECEIPTS": "Devolu\'e7\'e3o de Recibos Contabilizados",\par
    "CANCEL ORDERS": "Cancelar Pedidos",\par
    "SCHEDULE TRANSPORT": "Programar Transporte",\par
    "TRANSPORT TRACKING": "Rastreamento de Transporte",\par
    "CAUSES": "Causas",\par
    "SPECIAL FIELDS": "Campos Especiais",\par
    "INVENTORY QUERY": "Consulta de Invent\'e1rio",\par
    "PRODU\'c7\'c3O": "Producci\'f3n",\par
    "INVENT\'c1RIO": "Inventario",\par
    "FATURA\'c7AO": "Facturaci\'f3n",        \par
    "MESTRES": "Mestres",\par
    "CONFIGURA\'c7\'c3O T\'c9CNICA": "Configura\'e7ao T\'e9cnica",\par
    "MOVIMENTOS DE COMPRAS": "Movimentos de Compras",    \par
    "CONTROLE DE TEMPO DE PRODU\'c7AO": "Controle de Tempo de Produ\'e7ao",\par
    "DEVOLU\'c7AO DE DOCUMENTOS CONTABILIZADOS": "Devolu\'e7\'e3o de Documentos Contabilizados",\par
    "CONFIGURAR PONTOS DE REORDENA\'c7\'c3O": "Configurar Pontos de Reordena\'e7\'e3o",\par
    "GERENCIAR PONTOS DE REORDENA\'c7\'c3O": "Gerenciar Pontos de Reordena\'e7\'e3o",\par
    "DEVLOLU\'c7AO DE RECIBOS CONTABILIZADOS": "Devolu\'e7\'e3o de Recibos Contabilizados",        \par
    "ACOMPANHAMENTO DE TRANSPORTE": "Acompanhamento de Transporte",    \par
    "CAMPOS ESPECIAIS": "Campos Especiais",\par
    "CONSULTA DE INVENT\'c1RIO": "Consulta Invent\'e1rio"\par
  \},  \par
  "NO_COMPANIES_FOUND_FOR_THE_IDENTIFICATION_NUMBER_PROVIDED": "Nenhuma empresa encontrada para o n\'famero de identifica\'e7\'e3o fornecido",\par
  "MANAGER_ADMIN":"Administrador admin"\par
\}\par
\par
\cf6\b app.module\cf0\b0\par
import \{ TranslateModule, TranslateLoader \} from '@ngx-translate/core';\par
import \{ TranslateHttpLoader \} from '@ngx-translate/http-loader';\par
\par
export function HttpLoaderFactory(http: HttpClient) \{\par
  return new TranslateHttpLoader(http, './assets/i18n/', '.json');\par
\}\par
\par
En imports:\par
TranslateModule.forRoot(\{\par
      loader: \{\par
        provide: TranslateLoader,\par
        useFactory: HttpLoaderFactory,\par
        deps: [HttpClient]\par
      \}\par
    \}),\par
\par
\cf6\b app.component.ts\cf0\b0\par
import \{ LanguageServiceService \} from '../app/services/language-service.service';\par
import \{ LanguageChangeService \} from '../app/services/language-change-service'; \par
\par
xport class AppComponent \{\par
  title = 'kontrolar-cloud-pwa';\par
  isAuthenticated: boolean = false;\par
\par
  constructor(\par
    private _swUpdate: SwUpdate,    \par
    private languageService: LanguageServiceService,\par
    private userService: UserService,\par
    private languageChangeService: LanguageChangeService \par
  ) \{\}\par
\par
  setLanguage(event: Event) \{    \par
    const selectElement = event.target as HTMLSelectElement;\par
    const language = selectElement.value;\par
    this.languageService.setLanguage(language);\par
    this.languageChangeService.changeLanguage(language); // Notifica el cambio de idioma\par
  \}\par
\par
  ngOnInit(): void \{\par
    this.checkForUpdates();\par
    this.isAuthenticated = this.userService.IsAuthenticated();\par
    this.isAuthenticated = true;\par
  \}\par
\par
\cf6\b app.component.html\cf0\b0\par
<div class="container-fluid">\par
  <div class="row">\par
\par
    <div class="col-3 text-white" *ngIf="isAuthenticated == true" id="side-bar">\par
      <app-sidebar-menu></app-sidebar-menu>\par
    </div>\par
\par
    <div class="col" id="right-side">\par
\par
      <nav class="navbar navbar-expand-lg navbar-light bg-light">\par
        <div class="container-fluid">\par
          <div class="ms-auto">\par
            <select class="form-select" (change)="setLanguage($event)">\par
              <option value="es-CO">Espa\'f1ol</option>\par
              <option value="en-US">English</option>\par
              <option value="pt-PT">Portugu\'eas</option>\par
            </select>\par
          </div>\par
        </div>\par
      </nav>\par
\par
      <main>\par
        <router-outlet></router-outlet>\par
      </main>\par
\par
    </div><!-- right-side -->\par
\par
  </div><!-- row -->\par
</div>\par
\par
\cf6\b sidebar-menu.component.ts\cf0\b0\par
import \{ TranslateService \} from '@ngx-translate/core';\par
import \{ LanguageChangeService \} from '../../services/language-change-service';\par
\par
export class SidebarMenuComponent implements OnInit \{\par
  options: any;\par
  iobjOpcionMovil: iObjOpcionMovil = \{\par
    listaOpcionesMoviles: [] as iMenu[],  \par
    listaModulos: [] as iModulo[]\par
  \};\par
  filteredOptions: \{ [key: number]: iMenu[] \} = \{\};\par
  selectedCompany: string = '';\par
\par
  constructor(\par
    private userService: UserService,\par
    private localStorageService: LocalStorageService,\par
    private translate: TranslateService,\par
    private languageChangeService: LanguageChangeService\par
  ) \{ \}\par
\par
  ngOnInit(): void \{\par
    const idUser = 1;\par
    const idProfile = 1;\par
\par
    this.userService.GetOptionsByProfile(idUser, idProfile).subscribe(\par
      (data) => \{        \par
        this.iobjOpcionMovil = data;                \par
        this.filterOptions();\par
        this.selectedCompany = this.localStorageService.getData('selectedCompany');        \par
      \},\par
      (error) => \{\par
        console.error('Error fetching options', error);\par
      \}\par
    );\par
    // Escucha el cambio de idioma\par
    this.languageChangeService.currentLanguage.subscribe(language => \{\par
      this.translateModulesAndOptions();\par
    \});\par
  \}\par
\par
  translateModulesAndOptions(): void \{\par
    if (this.iobjOpcionMovil.listaModulos && this.iobjOpcionMovil.listaModulos.length > 0) \{\par
      this.iobjOpcionMovil.listaModulos.forEach(modulo => \{\par
        const key = `MODULES.$\{modulo.nombreModulo.toUpperCase()\}`;\par
        console.log('key ', key);\par
        this.translate.get(key).subscribe((translatedName: string) => \{\par
          console.log('translatedName ', translatedName);\par
          console.log('translatedName !== key ', translatedName !== key);\par
          if (translatedName !== key) \{ // Solo actualizar si se encuentra una traducci\'f3n\par
            modulo.nombreModulo = translatedName;\par
          \}\par
        \});\par
      \});\par
    \}\par
\par
    if (this.iobjOpcionMovil.listaOpcionesMoviles && this.iobjOpcionMovil.listaOpcionesMoviles.length > 0) \{\par
      console.log('this.iobjOpcionMovil.listaOpcionesMoviles ', this.iobjOpcionMovil.listaOpcionesMoviles);\par
      this.iobjOpcionMovil.listaOpcionesMoviles.forEach(opcion => \{\par
        const key = `MODULES.$\{opcion.nombre.toUpperCase()\}`;\par
        this.translate.get(key).subscribe((translatedName: string) => \{\par
          // Solo actualizar si se encuentra una traducci\'f3n\par
          if (translatedName !== key) \{ \par
            opcion.nombre = translatedName;\par
          \}\par
        \});\par
      \});\par
    \}\par
  \}\par
\par
  filterOptions(): void \{\par
    this.iobjOpcionMovil.listaModulos.forEach(modulo => \{      \par
      // Eliminar 'MODULES.' del nombre del m\'f3dulo\par
      modulo.nombreModulo = modulo.nombreModulo.replace('MODULES.', '');      \par
      this.filteredOptions[modulo.idModulo] = this.iobjOpcionMovil.listaOpcionesMoviles.filter(option => option.idModulo === modulo.idModulo);\par
      //console.log(`M\'f3dulo procesado: $\{modulo.nombreModulo\}, Icono: $\{modulo.iconoModulo\}`);\par
    \});\par
  \}\par
\par
  getFilteredOptions(moduloId: number): iMenu[] \{\par
    return (this.filteredOptions[moduloId] || []).map(option => (\{\par
      ...option,\par
      nombre: option.nombre.replace('MODULES.', '')\par
    \}));\par
  \}\par
\par
  getSubMenuOptions(moduloId: number, parentId: number): iMenu[] \{\par
    return this.iobjOpcionMovil.listaOpcionesMoviles.filter(option => option.idModulo === moduloId && option.idPadre === parentId);\par
  \}\par
\}\par
\par
\cf6\b sidebar-menu.component.html\cf0\b0\par
<div>\par
  <img src="../../../assets/img/LOGO_FONDO_TRANSPARENTE2.png" alt="Image Description" class="img-fluid mb-3">   \par
</div>\par
\par
<div *ngIf="iobjOpcionMovil">\par
\par
  <div class="dropdown custom-dropdown">    \par
    <button class="btn btn-secondary dropdown-toggle custom-dropdown-button" \par
      type="button" \par
      id="dropdownMenuButton"  \par
      data-bs-toggle="dropdown" \par
      aria-expanded="false"\par
      translate>\par
      <i class="fa-solid fa-folder"></i>\par
      MANAGER_ADMIN\par
    </button>\par
    <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">\par
      <li><a class="dropdown-item" href="#" translate><i class="fa-solid fa-city"></i> CHANGE_COMPANY</a></li>\par
      <li><a class="dropdown-item" href="#" translate><i class="fa-solid fa-key"></i> CHANGE_PASSWORD</a></li>\par
      <li><hr class="dropdown-divider"></li>\par
      <li><a class="dropdown-item" href="#" translate><i class="fa-solid fa-circle-xmark"></i> CLOSE_SESSION</a></li>\par
    </ul>\par
    <div class="selected-company">\{\{selectedCompany\}\}</div>  \par
  </div>  \par
\par
  <div class="accordion" id="accordionExample" style="margin: 5px;">\par
    <div *ngFor="let modulo of iobjOpcionMovil.listaModulos; let i = index" class="accordion-item">            \par
      <h2 class="accordion-header purple-background" id="heading\{\{ i \}\}">\par
\par
        <button class="accordion-button collapsed \{\{ modulo.claseModulo \}\}" \par
          type="button" \par
          data-bs-toggle="collapse" \par
          [attr.data-bs-target]="'#collapse' + i" \par
          aria-expanded="false" \par
          [attr.aria-controls]="'collapse' + i"\par
          [ngStyle]="\{'background-color': modulo.colorModule\}"\par
        >\par
          <i [class]="modulo.iconoModulo"></i>      \par
          <span style="margin-left: 30px;">\{\{ modulo.nombreModulo \}\}</span>\par
        </button>\par
      </h2>\par
      \par
      <div id="collapse\{\{ i \}\}" class="accordion-collapse collapse" [attr.aria-labelledby]="'heading' + i" data-bs-parent="#accordionExample">        \par
        <div class="accordion-body">\par
          <table class="table table-hover">\par
            <tbody>\par
              <ng-container *ngFor="let padre of getFilteredOptions(modulo.idModulo)">\par
                <tr *ngIf="padre.tieneSubMenu">\par
                  <td>\par
\par
                    <a data-bs-toggle="collapse" [attr.href]="'#item' + i" aria-expanded="false" [attr.aria-controls]="'item' + i">\par
                      <span class="\{\{ padre.icono \}\}"></span>\par
                      <span style="margin-left: 10px;">\{\{ padre.nombre \}\}</span>\par
                    </a>\par
\par
                    <div class="collapse" [attr.id]="'item' + i">\par
                      <div class="card card-body">\par
                        <ng-container *ngFor="let hijo of getSubMenuOptions(modulo.idModulo, padre.idOpcion)">\par
                          <div class="ms-3">\par
                            <br>\par
                            <span class="\{\{ hijo.icono \}\}"></span>\par
                            <a [routerLink]="['/', hijo.controlador, hijo.accion, \{ Id: modulo.idModulo, IdOpcion: hijo.idOpcion \}]">&nbsp;\{\{ hijo.nombre \}\}</a>\par
                          </div>\par
                        </ng-container>\par
                      </div>\par
\par
                    </div>\par
                  </td>\par
                </tr>\par
\par
                <tr *ngIf="!padre.tieneSubMenu && padre.idPadre === 0">\par
                  <td>\par
                    <span class="\{\{ padre.icono \}\}"></span>\par
                    <a [routerLink]="['/', padre.controlador, padre.accion, \{ Id: modulo.idModulo, IdOpcion: padre.idOpcion \}]">&nbsp;\{\{ padre.nombre \}\}</a>\par
                  </td>\par
                </tr>\par
                \par
              </ng-container>\par
            </tbody>\par
          </table>\par
        </div>\par
      </div>\par
    </div>\par
  </div>\par
</div>\par
\par
\cf6\b language-service.service.ts\cf0\b0\par
import \{ Injectable \} from '@angular/core';\par
import \{ Location \} from '@angular/common';\par
import \{ TranslateService \} from '@ngx-translate/core';\par
\par
@Injectable(\{\par
  providedIn: 'root'\par
\})\par
export class LanguageServiceService \{\par
\par
  constructor(private translate: TranslateService, private location: Location) \{    \par
  \}\par
\par
  setLanguage(language: string) \{    \par
    this.translate.use(language).subscribe(() => \{\par
      this.location.replaceState(this.location.path(), '', \{ lang: language \});\par
    \});\par
  \}\par
\}\par
\par
\cf6\b language-change.service.ts\cf0\b0\par
import \{ Injectable \} from '@angular/core';\par
import \{ BehaviorSubject \} from 'rxjs';\par
\par
@Injectable(\{\par
  providedIn: 'root'\par
\})\par
export class LanguageChangeService \{\par
  private languageSource = new BehaviorSubject<string>('es-CO');\par
  currentLanguage = this.languageSource.asObservable();\par
\par
  changeLanguage(language: string) \{    \par
    this.languageSource.next(language);    \par
  \}\par
\}\par
\par
///////////////////\par
\par
\b C\'f3mo traducir lo que viene de la base de datos\par
\b0 Con la infraestructura de traducci\'f3n ya montada\par
\par
<div id="service-error" *ngIf="showServiceError">\par
          \{\{ serviceError \}\}\par
</div>\par
\par
import \{ TranslateService \} from '@ngx-translate/core';\par
import \{ LanguageChangeService \} from '../../services/language-change-service';\par
\par
ponerlos en el constructor\par
\par
  ngOnInit(): void \{\par
    // Suscribirse a cambios de idioma\par
    this.languageChangeService.currentLanguage.subscribe(language => \{\par
      this.translate.use(language);\par
    \});\par
  \}\par
\par
 onSubmit() \{\par
...\par
this.userService.saveData(user).subscribe(\par
        response => \{\par
          this.responseMessage = response.message;\par
          this.messageStatus = 'success';\par
  \par
          // Suscribirse a cambios de idioma\par
          this.languageChangeService.currentLanguage.subscribe(language => \{\par
            this.translate.use(language).subscribe(() => \{\par
              this.translate.get(this.responseMessage).subscribe((translatedMessage: string) => \{\par
                this.responseMessage = translatedMessage;\par
                this.translate.get('Exito').subscribe((translatedHeader: string) => \{\par
                  this.messageHeader = translatedHeader;\par
                  this.showModal(this.responseMessage, this.messageHeader);\par
                \});\par
              \});\par
            \});\par
          \});\par
        \},\par
        error => \{\par
          this.serviceError = error.error?.message || 'Error desconocido';\par
          this.translateServiceError(this.serviceError);\par
          this.showServiceError = true;\par
        \}\par
      );\par
    \} else \{\par
      this.translateServiceError('Formulario invalido');\par
      this.showServiceError = true;\par
    \}\par
  \}  \par
\par
 translateServiceError(message: string): void\{\par
    this.translate.get(message).subscribe((translatedName: string) => \{            \par
      this.serviceError = translatedName;\par
    \});\par
  \}\par
\par
////////////////\par
\par
\b Actualizar el estado isAuthenticated en AppComponent despu\'e9s de un inicio de sesi\'f3n exitoso\b0\par
Crear un Servicio de Autenticaci\'f3n\par
// auth.service.ts\par
import \{ Injectable \} from '@angular/core';\par
import \{ BehaviorSubject \} from 'rxjs';\par
\par
@Injectable(\{\par
  providedIn: 'root'\par
\})\par
export class AuthService \{\par
  private authenticatedSubject = new BehaviorSubject<boolean>(false);\par
  authenticated$ = this.authenticatedSubject.asObservable();\par
\par
  setAuthenticated(value: boolean) \{\par
    this.authenticatedSubject.next(value);\par
  \}\par
\par
  isAuthenticated(): boolean \{\par
    return this.authenticatedSubject.value;\par
  \}\par
\}\par
\par
Modificar el LoginComponent\par
import \{ AuthService \} from '../../services/auth.service'; // Importar AuthService\par
\par
En el constructor:  private authService: AuthService \par
\par
private handleTokenResponse(response: any): void \{\par
    this.token = response;\par
    this.localStorageService.setData('token', this.token);\par
    localStorage.setItem('last date', new Date().toISOString());\par
\par
    this.authService.setAuthenticated(true); // Notificar autenticaci\'f3n\par
    this.router.navigate(['/bienvenido']);\par
  \}\par
\par
Modificar el AppComponent\par
import \{ AuthService \} from '../app/services/auth.service';\par
\par
En el constructor: private authService: AuthService\par
\par
ngOnInit(): void \{\par
    this.translate.setDefaultLang('es-CO');\par
    this.translate.use('es-CO');\par
    this.checkForUpdates();\par
    this.isAuthenticated = this.userService.IsAuthenticated();\par
\par
    // Suscribirse a cambios de autenticaci\'f3n\par
    this.authService.authenticated$.subscribe(isAuthenticated => \{\par
      this.isAuthenticated = isAuthenticated;\par
    \});\par
  \}\par
\par
////////////////\par
\par
\b Como poner un div al lado del otro\b0\par
<div class="container">\par
    <div class="inner"></div>\par
    <div class="inner"></div>\par
</div>\par
\par
.container \{\par
    display: flex;\par
\}\par
\par
.inner \{\par
    flex: 1; /* Para que los divs ocupen el mismo espacio */    \par
\}\par
\par
////////////////\par
\par
\b Usando Emmet como se hace una lista no ordenada que cada una tiene un enlace y una imagen\b0\par
ul>li*3>a[href="#"]>img[src="image.jpg"]\par
\par
////////////////\par
\par
\b Para evitar la repetici\'f3n de c\'f3digo entre los dos componentes UsersComponent y ProfilesComponent\b0  \par
puedes utilizar un servicio compartido para manejar la l\'f3gica de visibilidad y mover la funcionalidad com\'fan a un componente base del cual hereden los componentes espec\'edficos. Aqu\'ed tienes una forma de hacerlo:\par
\par
1. Crear un Servicio Compartido\par
Primero, crea un servicio para manejar la l\'f3gica de visibilidad de los \'edconos CRUD.\par
\par
typescript\par
Copiar c\'f3digo\par
// src/app/services/crud-actions-visibility.service.ts\par
import \{ Injectable \} from '@angular/core';\par
\par
@Injectable(\{\par
  providedIn: 'root'\par
\})\par
export class CrudActionsVisibilityService \{\par
  showAdd = false;\par
  showEdit = false;\par
  showDelete = false;\par
  showSearch = false;\par
\par
  setAddVisible(): void \{\par
    this.resetVisibility();\par
    this.showAdd = true;\par
  \}\par
\par
  setEditVisible(): void \{\par
    this.resetVisibility();\par
    this.showEdit = true;\par
  \}\par
\par
  setDeleteVisible(): void \{\par
    this.resetVisibility();\par
    this.showDelete = true;\par
  \}\par
\par
  setSearchVisible(): void \{\par
    this.resetVisibility();\par
    this.showSearch = true;\par
  \}\par
\par
  resetVisibility(): void \{\par
    this.showAdd = false;\par
    this.showEdit = false;\par
    this.showDelete = false;\par
    this.showSearch = false;\par
  \}\par
\}\par
2. Crear un Componente Base\par
Crea un componente base que maneje la l\'f3gica com\'fan.\par
\par
typescript\par
Copiar c\'f3digo\par
// src/app/components/crud-base.component.ts\par
import \{ OnInit \} from '@angular/core';\par
import \{ CrudActionsVisibilityService \} from '../services/crud-actions-visibility.service';\par
\par
export abstract class CrudBaseComponent implements OnInit \{\par
  showSaveAndCancel = false;\par
  showAdd = false;\par
  showEdit = false;\par
  showDelete = false;\par
  showSearch = false;\par
\par
  constructor(protected crudActionsVisibilityService: CrudActionsVisibilityService) \{\}\par
\par
  ngOnInit(): void \{\par
    this.updateVisibility();\par
  \}\par
\par
  onAddClick(): void \{\par
    this.crudActionsVisibilityService.setAddVisible();\par
    this.updateVisibility();\par
  \}\par
\par
  onEditClick(): void \{\par
    this.crudActionsVisibilityService.setEditVisible();\par
    this.updateVisibility();\par
  \}\par
\par
  onDeleteClick(): void \{\par
    this.crudActionsVisibilityService.setDeleteVisible();\par
    this.updateVisibility();\par
  \}\par
\par
  onSearchClick(): void \{\par
    this.crudActionsVisibilityService.setSearchVisible();\par
    this.updateVisibility();\par
  \}\par
\par
  private updateVisibility(): void \{\par
    this.showAdd = this.crudActionsVisibilityService.showAdd;\par
    this.showEdit = this.crudActionsVisibilityService.showEdit;\par
    this.showDelete = this.crudActionsVisibilityService.showDelete;\par
    this.showSearch = this.crudActionsVisibilityService.showSearch;\par
  \}\par
\}\par
3. Actualizar los Componentes Espec\'edficos\par
Haz que los componentes espec\'edficos hereden del componente base.\par
\par
typescript\par
Copiar c\'f3digo\par
// src/app/components/users/users.component.ts\par
import \{ Component \} from '@angular/core';\par
import \{ CrudBaseComponent \} from '../crud-base.component';\par
import \{ CrudActionsVisibilityService \} from '../../services/crud-actions-visibility.service';\par
\par
@Component(\{\par
  selector: 'app-users',\par
  templateUrl: './users.component.html',\par
  styleUrls: ['./users.component.css']\par
\})\par
export class UsersComponent extends CrudBaseComponent \{\par
  constructor(crudActionsVisibilityService: CrudActionsVisibilityService) \{\par
    super(crudActionsVisibilityService);\par
  \}\par
\}\par
typescript\par
Copiar c\'f3digo\par
// src/app/components/profiles/profiles.component.ts\par
import \{ Component \} from '@angular/core';\par
import \{ CrudBaseComponent \} from '../crud-base.component';\par
import \{ CrudActionsVisibilityService \} from '../../services/crud-actions-visibility.service';\par
\par
@Component(\{\par
  selector: 'app-profiles',\par
  templateUrl: './profiles.component.html',\par
  styleUrls: ['./profiles.component.css']\par
\})\par
export class ProfilesComponent extends CrudBaseComponent \{\par
  constructor(crudActionsVisibilityService: CrudActionsVisibilityService) \{\par
    super(crudActionsVisibilityService);\par
  \}\par
\}\par
4. Actualizar las Plantillas\par
Las plantillas HTML pueden mantenerse pr\'e1cticamente sin cambios, ya que ahora se utilizan las propiedades y m\'e9todos heredados del componente base.\par
\par
html\par
Copiar c\'f3digo\par
<!-- users.component.html -->\par
<div class="container">\par
  <div class="inner" id="icons">\par
    <ul>\par
      <li><img src="../../../assets/img/Add.png" alt="Adicionar" (click)="onAddClick()"></li>\par
      <li><img src="../../../assets/img/Edit.png" alt="Editar" (click)="onEditClick()"></li>\par
      <li><img src="../../../assets/img/DatoBorrado.png" alt="Borrar" (click)="onDeleteClick()"></li>\par
      <li><img src="../../../assets/img/Buscar.png" alt="Buscar" (click)="onSearchClick()"></li>\par
      <li *ngIf="showSaveAndCancel"><img src="../../../assets/img/Save.png" alt="Guardar"></li>\par
      <li *ngIf="showSaveAndCancel"><img src="../../../assets/img/Cancel.png" alt="Cancelar"></li>\par
    </ul>\par
  </div>\par
\par
  <div class="inner" id="crud-components">\par
    <div *ngIf="showAdd"><app-users-add></app-users-add></div>\par
    <div *ngIf="showEdit">Editar</div>\par
    <div *ngIf="showDelete">Borrar</div>\par
    <div *ngIf="showSearch">Buscar</div>\par
  </div>\par
</div>\par
html\par
Copiar c\'f3digo\par
<!-- profiles.component.html -->\par
<div class="container">\par
  <div class="inner" id="icons">\par
    <ul>\par
      <li><img src="../../../assets/img/Add.png" alt="Adicionar" (click)="onAddClick()"></li>\par
      <li><img src="../../../assets/img/Edit.png" alt="Editar" (click)="onEditClick()"></li>\par
      <li><img src="../../../assets/img/DatoBorrado.png" alt="Borrar" (click)="onDeleteClick()"></li>\par
      <li><img src="../../../assets/img/Buscar.png" alt="Buscar" (click)="onSearchClick()"></li>\par
      <li *ngIf="showSaveAndCancel"><img src="../../../assets/img/Save.png" alt="Guardar"></li>\par
      <li *ngIf="showSaveAndCancel"><img src="../../../assets/img/Cancel.png" alt="Cancelar"></li>\par
    </ul>\par
  </div>\par
\par
  <div class="inner" id="crud-components">\par
    <div *ngIf="showAdd"><app-profiles-add></app-profiles-add></div>\par
    <div *ngIf="showEdit">Editar</div>\par
    <div *ngIf="showDelete">Borrar</div>\par
    <div *ngIf="showSearch">Buscar</div>\par
  </div>\par
</div>\par
\par
////////////////\par
\par
\b Disparar validaci\'f3n desde un componente padre\b0\par
Tengo una l\'f3gica repartida en varios componentes de angular y tengo un componente padre (users.component) y un componente hijo (users-add), haga los cambios necesarios para que cuando se presione Guardar se dispare la validaci\'f3n del formulario (onSubmit) del componente que se est\'e9 mostrando dentro del div crud-components que puede ser app-users-add, app-user-edit, app-users-delete, app-users-search.\par
\par
Para asegurarnos de que al hacer clic en el bot\'f3n "Guardar" se dispare la validaci\'f3n del formulario del componente que se est\'e9 mostrando dentro del div crud-components, haremos algunos ajustes en el c\'f3digo. Vamos a agregar m\'e9todos de referencia y comunicaci\'f3n entre el componente padre (UsersComponent) y los componentes hijos (UsersAddComponent, UsersEditComponent, etc.). Usaremos ViewChild y AfterViewInit para acceder a los m\'e9todos de los componentes hijos.\par
\par
Modificaciones en users.component.ts\par
Agregar referencias a los componentes hijos usando ViewChild.\par
Agregar un m\'e9todo para manejar el clic en el bot\'f3n "Guardar".\par
typescript\par
Copiar c\'f3digo\par
import \{ Component, OnInit, ViewChild, AfterViewInit \} from '@angular/core';\par
import \{ CrudActionsVisibility \} from '../../helpers/crud-icons-visibility';\par
import \{ CrudBaseComponent \} from '../crud-base/crud-base.component';\par
import \{ CrudActionsVisibilityService \} from '../../services/crud-actions-visibility.service';\par
import \{ UsersAddComponent \} from '../users-add/users-add.component';\par
import \{ UsersEditComponent \} from '../users-edit/users-edit.component';\par
import \{ UsersDeleteComponent \} from '../users-delete/users-delete.component';\par
import \{ UsersSearchComponent \} from '../users-search/users-search.component';\par
\par
@Component(\{\par
  selector: 'app-users',\par
  templateUrl: './users.component.html',\par
  styleUrls: ['./users.component.css', '../../shared-styles.css']\par
\})\par
export class UsersComponent extends CrudBaseComponent implements AfterViewInit \{\par
  @ViewChild(UsersAddComponent) usersAddComponent?: UsersAddComponent;\par
  @ViewChild(UsersEditComponent) usersEditComponent?: UsersEditComponent;\par
  @ViewChild(UsersDeleteComponent) usersDeleteComponent?: UsersDeleteComponent;\par
  @ViewChild(UsersSearchComponent) usersSearchComponent?: UsersSearchComponent;\par
\par
  override showSaveAndCancel = false;\par
  override showAdd = CrudActionsVisibility.showAdd;\par
  override showEdit = CrudActionsVisibility.showEdit;\par
  override showDelete = CrudActionsVisibility.showDelete;\par
  override showSearch = CrudActionsVisibility.showSearch;\par
\par
  constructor(crudActionsVisibilityService: CrudActionsVisibilityService) \{\par
    super(crudActionsVisibilityService);\par
  \}\par
\par
  ngAfterViewInit(): void \{\par
    this.updateVisibility();\par
  \}\par
\par
  onSaveClick(): void \{\par
    if (this.showAdd && this.usersAddComponent) \{\par
      this.usersAddComponent.onSubmit();\par
    \} else if (this.showEdit && this.usersEditComponent) \{\par
      this.usersEditComponent.onSubmit();\par
    \} else if (this.showDelete && this.usersDeleteComponent) \{\par
      this.usersDeleteComponent.onSubmit();\par
    \} else if (this.showSearch && this.usersSearchComponent) \{\par
      this.usersSearchComponent.onSubmit();\par
    \}\par
  \}\par
\}\par
Modificaciones en users.component.html\par
Agregar el evento click para el bot\'f3n "Guardar":\par
\par
html\par
Copiar c\'f3digo\par
<div class="container">\par
  <div class="inner" id="icons">\par
    <ul>\par
      <li><img src="../../../assets/img/Add.png" alt="Adicionar" (click)="onAddClick()"></li>\par
      <li><img src="../../../assets/img/Edit.png" alt="Editar" (click)="onEditClick()"></li>\par
      <li><img src="../../../assets/img/DatoBorrado.png" alt="Borrar" (click)="onDeleteClick()"></li>\par
      <li><img src="../../../assets/img/Buscar.png" alt="Buscar" (click)="onSearchClick()"></li>\par
      <li *ngIf="showSaveAndCancel"><img src="../../../assets/img/Save.png" alt="Guardar" (click)="onSaveClick()"></li>\par
      <li *ngIf="showSaveAndCancel"><img src="../../../assets/img/Cancel.png" alt="Cancelar"></li>\par
    </ul>\par
  </div>\par
\par
  <div class="inner" id="crud-components">\par
    <div *ngIf="showAdd"><app-users-add></app-users-add></div>\par
    <div *ngIf="showEdit"><app-users-edit></app-users-edit></div>\par
    <div *ngIf="showDelete"><app-users-delete></app-users-delete></div>\par
    <div *ngIf="showSearch"><app-users-search></app-users-search></div>\par
  </div>\par
</div>\par
Asegurarse de que los componentes hijos tengan el m\'e9todo onSubmit\par
Verifique que cada componente hijo tenga un m\'e9todo onSubmit para que pueda ser llamado desde el componente padre.\par
\par
Por ejemplo, users-add.component.ts ya tiene el m\'e9todo onSubmit:\par
\par
typescript\par
Copiar c\'f3digo\par
import \{ Component \} from '@angular/core';\par
import \{ FormBuilder, FormGroup, Validators \} from '@angular/forms';\par
\par
@Component(\{\par
  selector: 'app-users-add',\par
  templateUrl: './users-add.component.html',\par
  styleUrls: ['./users-add.component.css']\par
\})\par
export class UsersAddComponent \{\par
  myForm: FormGroup;\par
\par
  constructor(private fb: FormBuilder) \{\par
    this.myForm = this.fb.group(\{\par
      identificationNumber: ['', [Validators.required, Validators.pattern('^[0-9]+$'), Validators.maxLength(25)]],\par
      firstName: ['', [Validators.required, Validators.pattern('^[a-zA-Z ]+$'), Validators.maxLength(100)]],\par
      lastName: ['', [Validators.required, Validators.maxLength(100)]],\par
      userMaster: ['no', Validators.required]\par
    \});\par
  \}\par
\par
  onSubmit() \{\par
    if (this.myForm.valid) \{\par
      console.log('Form Submitted!', this.myForm.value);\par
    \} else \{\par
      console.log('Form is invalid');\par
    \}\par
  \}\par
\}\par
\par
////////////////\par
\par
\b Poner una barra de scrolling en un tabla y controlar el tama\'f1o m\'e1ximo\par
\b0 en Angular con Bootstrap 5, es posible agregar una barra de desplazamiento (scrollbar) a una tabla. Para lograrlo, puedes envolver la tabla en un contenedor con las clases de Bootstrap que permiten el desplazamiento horizontal o vertical.\par
\par
Aqu\'ed tienes un ejemplo b\'e1sico de c\'f3mo hacerlo:\par
\par
HTML\par
html\par
Copiar c\'f3digo\par
<div class="table-responsive">\par
  <table class="table table-striped table-bordered">\par
    <thead>\par
      <tr>\par
        <th>Columna 1</th>\par
        <th>Columna 2</th>\par
        <th>Columna 3</th>\par
        <!-- Agrega m\'e1s columnas seg\'fan sea necesario -->\par
      </tr>\par
    </thead>\par
    <tbody>\par
      <tr>\par
        <td>Dato 1</td>\par
        <td>Dato 2</td>\par
        <td>Dato 3</td>\par
        <!-- Agrega m\'e1s datos seg\'fan sea necesario -->\par
      </tr>\par
      <!-- Agrega m\'e1s filas seg\'fan sea necesario -->\par
    </tbody>\par
  </table>\par
</div>\par
CSS (Opcional)\par
Si necesitas un desplazamiento vertical o quieres controlar la altura de la tabla, puedes agregar un estilo adicional:\par
\par
css\par
Copiar c\'f3digo\par
.table-responsive \{\par
  max-height: 400px; /* Ajusta la altura m\'e1xima seg\'fan sea necesario */\par
  overflow-y: auto; /* Permite el desplazamiento vertical */\par
\}\par
\par
////////////////\par
\par
\b Poner un div alerta para confirmaci\'f3n\par
\b0 Ocultar el div que tiene el bot\'f3n que llama al div alert\par
\par
<div class="global-container" *ngIf="submitted && !showDeleteAlert">\par
\par
<td *ngIf="action === 'delete'">\par
                  <button class="btn btn-warning btn-sm" (click)="confirmDeleteProfile(profile)">\tab\{\{ 'DELETE' | translate \}\}</button> \par
</td>  \par
\par
<div *ngIf="showDeleteAlert" class="alert alert-danger alert-dismissible">\par
  <strong>\{\{ 'CONFIRM_DELETE' | translate \}\}</strong>\par
  <p>\{\{ 'ARE_YOU_SURE' | translate \}\}</p>\par
  <button type="button" class="btn btn-secondary" (click)="cancelDelete()">\{\{ 'NO' | translate \}\}</button>\par
  <button type="button" class="btn btn-danger" (click)="deleteProfile(profileToDelete)">\{\{ 'YES' | translate \}\}</button>\par
</div>\par
\par
ts:\par
showDeleteAlert: boolean = false;\par
profileToDelete: iProfileDTO | null = null;\par
\par
confirmDeleteProfile(profile: iProfileDTO) \{\par
    this.profileToDelete = profile;\par
    this.showDeleteAlert = true; // cambio: mostrar alerta y ocultar global-container\par
  \}\par
\par
  // nuevo\par
  cancelDelete() \{\par
    this.showDeleteAlert = false; // cambio: ocultar alerta y mostrar global-container\par
    this.profileToDelete = null;\par
  \}\par
\par
  // cambio\par
  deleteProfile(profile: iProfileDTO | null) \{\par
    if (profile) \{\par
      console.log('Deleting profile:', profile);\par
      this.showDeleteAlert = false; // cambio: ocultar alerta y mostrar global-container\par
      this.profileToDelete = null;\par
      // Aqu\'ed puedes agregar la l\'f3gica para eliminar el usuario\par
    \}\par
  \}\par
\par
////////////////\par
\par
\b Centrar el contenido y agregar espacio entre los botones \par
\b0 <div *ngIf="showDeleteAlert" class="alert alert-danger alert-dismissible \ul text-center\ulnone " id="confirmation">\par
  <strong>\{\{ 'CONFIRM_DELETE' | translate \}\}</strong>\par
  <p>\{\{ 'ARE_YOU_SURE?' | translate \}\}</p>\par
  <div class="\highlight1 d-flex \cf3\highlight0\b justify-content-center\cf0\b0  \highlight2 gap-3\highlight0 ">\par
    <button type="button" class="btn btn-secondary" (click)="cancelDelete()">\{\{ 'NO' | translate \}\}</button>\par
    <button type="button" class="btn btn-danger" (click)="deleteProfile(profileToDelete)">\{\{ 'YES' | translate \}\}</button>\par
  </div>\par
</div>\par
\par
\ul text-center: \ulnone Esta clase de Bootstrap centra el texto dentro del div.\par
\highlight1 d-flex \highlight0 y \cf3\b justify-content-center\cf0\b0 : Utiliza el sistema de flexbox de Bootstrap para centrar horizontalmente los botones.\par
\highlight2 gap-3\highlight0 : A\'f1ade un espacio entre los botones\par
\par
////////////////\par
\par
\b Como hacer que aparezca el bot\'f3n editar\b0\par
\cf6\b profiles.component.ts\cf0\b0\par
 override onEditClick(): void \{    \par
    this.crudActionsVisibilityService.setSearchVisible();\par
    this.updateVisibility();    \par
    this.localStorageService.removeData('action');\par
    this.localStorageService.setData('action', 'edit');     \par
  \}\par
\par
\cf6\b profiles-show-table.component.html\cf0\b0\par
<td *ngIf="action === 'edit'">\par
                  <button class="btn btn-warning btn-sm" \par
\tab\tab (click)="editProfile(profile)">\par
\tab\tab\tab\{\{ 'EDIT' | translate \}\}\par
\tab </button>\par
</td>\par
\par
\cf6\b profiles-show-table.component.ts\cf0\b0\par
 ngOnInit(): void \{\par
    this.action = this.localStorageService.getData('action');\par
  \}\par
\par
////////////////\par
\par
\b Actualizar el input type radio con los datos q el componente recibe\par
\b0 this.userTransferService.currentUser.subscribe(user => \{ \par
      if (user) \{        \par
        console.log(user);\par
        this.user = user;\par
        const userMasterValue = user.userMaster ? 'yes' : 'no'; \par
        this.myForm.patchValue(\{ ...user, userMaster: userMasterValue \});  \par
      \}\par
    \});\par
\par
////////////////\par
\par
\b Ejecutar un m\'e9todo de un componente abuelo desde un componente nieto\par
\b0 Utilizar un servicio para la comunicaci\'f3n entre componentes. \par
\par
1. Crear un Servicio de Comunicaci\'f3n\par
1. Crea un servicio que manejar\'e1 la comunicaci\'f3n entre los componentes.\par
\par
\cf6\b // communication.service.ts\cf0\b0\par
import \{ Injectable \} from '@angular/core';\par
import \{ Subject \} from 'rxjs';\par
\par
@Injectable(\{\par
  providedIn: 'root'\par
\})\par
export class CommunicationService \{\par
  private actionSource = new Subject<void>();\par
  action$ = this.actionSource.asObservable();\par
\par
  triggerAction() \{\par
    this.actionSource.next();\par
  \}\par
\}\par
\par
2. Inyectar el Servicio en el Componente Nieto\par
Inyecta el servicio en el componente nieto, desde donde se va a desencadenar la acci\'f3n.\par
\par
\cf6 // nieto.component.ts\cf0\par
import \{ Component \} from '@angular/core';\par
import \{ CommunicationService \} from '../communication.service';\par
\par
@Component(\{\par
  selector: 'app-nieto',\par
  templateUrl: './nieto.component.html'\par
\})\par
export class NietoComponent \{\par
\par
  constructor(private communicationService: CommunicationService) \{\}\par
\par
  onSomeEvent() \{\par
    // Ejecuta el m\'e9todo en el abuelo a trav\'e9s del servicio\par
    this.communicationService.triggerAction();\par
  \}\par
\}\par
\par
3. Escuchar el Evento en el Componente Abuelo\par
En el componente abuelo, inyecta el servicio y suscr\'edbete al evento para ejecutar el m\'e9todo deseado.\par
\par
\cf6\b // abuelo.component.ts\cf0\b0\par
import \{ Component, OnInit \} from '@angular/core';\par
import \{ CommunicationService \} from '../communication.service';\par
\par
@Component(\{\par
  selector: 'app-abuelo',\par
  templateUrl: './abuelo.component.html'\par
\})\par
export class AbueloComponent implements OnInit \{\par
\par
  constructor(private communicationService: CommunicationService) \{\}\par
\par
  ngOnInit() \{\par
    // Suscr\'edbete al evento para ejecutar el m\'e9todo cuando sea necesario\par
    this.communicationService.action$.subscribe(() => \{\par
      this.miMetodo();\par
    \});\par
  \}\par
\par
  miMetodo() \{\par
    // M\'e9todo que quieres ejecutar desde el componente nieto\par
    console.log('M\'e9todo en el componente abuelo ejecutado.');\par
  \}\par
\}\par
\par
////////////////\par
\par
\b Como personalizar los estilos\par
\b0 Crear un servicio\par
\par
import \{ Injectable, Renderer2, RendererFactory2 \} from '@angular/core';\par
\par
@Injectable(\{\par
  providedIn: 'root'\par
\})\par
export class ThemeServiceService \{\par
  private renderer: Renderer2;\par
  private currentTheme: string = 'theme-dark'; \par
\par
  constructor(rendererFactory: RendererFactory2) \{\par
    this.renderer = rendererFactory.createRenderer(null, null);\par
    this.setTheme(this.currentTheme); \par
  \}\par
\par
  setTheme(theme: string) \{\par
    this.renderer.removeClass(document.body, this.currentTheme); \par
    this.currentTheme = theme === 'light' ? 'theme-light' : 'theme-dark'; \par
    this.renderer.addClass(document.body, this.currentTheme); \par
\par
    const backgroundColor = theme === 'light' ? '#ffffff' : '#000000';\par
    const textColor = theme === 'light' ? '#000000' : '#ffffff';\par
\par
    this.renderer.setStyle(document.documentElement, '--background-color', backgroundColor);\par
    this.renderer.setStyle(document.documentElement, '--text-color', textColor);\par
  \}  \par
\par
  getTheme(): string \{\par
    return this.currentTheme; \par
  \}\par
\}\par
\par
En la base de los estilos:\par
\par
/* styles.css */\par
:root \{\par
    --background-color: #000000; \par
    --text-color: #ffffff; \par
\}\par
\par
.theme-light \{\par
    --background-color: #ffffff;\par
    --text-color: #000000;\par
\}\par
\par
.theme-dark \{\par
    --background-color: #000000;\par
    --text-color: #ffffff;\par
\}\par
\par
body \{\par
    background-color: var(--background-color);\par
    color: var(--text-color);\par
\}\par
\par
El componente donde se escogen los estilos del sitio\par
\par
<!-- bienvenido.component.html -->\par
<div>\par
    <label>\par
        <input type="radio" name="theme" value="light" (change)="changeTheme('light')">\par
        Light Theme\par
    </label>\par
    <label>\par
        <input type="radio" name="theme" value="dark" (change)="changeTheme('dark')" checked>\par
        Dark Theme\par
    </label>\par
</div>\par
\par
<h2 [ngClass]="currentTheme">Bienvenido</h2>\par
\par
import \{ Component, ChangeDetectorRef, Renderer2  \} from '@angular/core';\par
import \{ ThemeServiceService \} from '../../services/general/theme-service.service';\par
\par
@Component(\{\par
  selector: 'app-bienvenido',\par
  templateUrl: './bienvenido.component.html',\par
  styleUrls: ['./bienvenido.component.css']\par
\})\par
export class BienvenidoComponent \{\par
  constructor(    \par
    private themeService: ThemeServiceService\par
  ) \{ \par
    this.currentTheme = this.themeService.getTheme(); \par
  \} \par
  \par
  currentTheme: string;\par
\par
  changeTheme(theme: string) \{    \par
    this.themeService.setTheme(theme); \par
  \} \par
\}\par
\par
Componente interno q toma los cambios\par
\par
.section-body \{\par
    padding: 1rem;\par
    /* background-color: #333; */\par
    background-color: var(--background-color); /**/    \par
\}\par
\par
////////////////\par
\par
\b Hacer que un div quede al lado del otro en pantallas grandes y que queden uno encima del otro en pantallas peque\'f1as + controlar el tama\'f1o de un textbox interno\par
\b0\par
<div class="container">\par
    <div class="row">\par
        <div class="col-12 col-md-6">\par
            1\par
        </div>\par
        <div class="col-12 col-md-6">\par
            2 <input type="text" class="form-control form-control-sm w-50 w-md-75">\par
        </div>\par
    </div>\par
</div>\par
\par
////////////////\par
\par
\b Como hacer que un bot\'f3n de un nieto ejecute una acci\'f3n de un abuelo\par
Como hacer que al pulsar edit se muestren \'edconos en el componente users\par
\b0\par
users-show-table\par
En onEditUser\par
 this.activateEditSaveService.triggerAction();\par
\par
El servicio\par
import \{ Injectable \} from '@angular/core';\par
import \{ Subject \} from 'rxjs';\par
\par
@Injectable(\{\par
  providedIn: 'root'\par
\})\par
export class ActivateEditSaveService \{\par
  private actionSource = new Subject<void>();\par
  action$ = this.actionSource.asObservable();\par
\par
  triggerAction() \{\par
    //console.log('En el servicio triggerAction');\par
    this.actionSource.next();\par
  \}\par
\}\par
\par
users\par
Dentro del constructor\par
super(crudActionsVisibilityService, activateEditSaveService);\par
\par
crud-base\par
  ngOnInit(): void \{\par
    this.updateVisibility();\par
    // Suscr\'edbete al evento para ejecutar el m\'e9todo cuando sea necesario\par
    this.activateEditSaveService.action$.subscribe(() => \{\par
      this.onAddForEditClick();\par
    \});\par
  \}\par
\par
onAddForEditClick(): void \{\par
    this.crudActionsVisibilityService.setAddForEditVisible();\par
    this.updateVisibility();\par
    //console.log('Add for Edit Clicked');\par
  \}\par
\par
En el servicio crud-action-visibility\par
 setAddForEditVisible(): void \{\par
    this.resetVisibilityForAddOfEdit();\par
    this.showAddForEdit = true;\par
    this.showSaveForEditAndLogout = true;    \par
  \}\par
\par
////////////////\par
\par
\b Llamar a un m\'e9todo de un componente hermano a trav\'e9s de un servicio\par
\b0 Paso 1: Crear un servicio para la comunicaci\'f3n\par
ng generate service sibling-communication\par
\par
Crea un Subject o BehaviorSubject que permitir\'e1 emitir eventos entre los componentes:\par
\par
\cf6\b // sibling-communication.service.ts\cf0\b0\par
import \{ Injectable \} from '@angular/core';\par
import \{ Subject \} from 'rxjs';\par
\par
@Injectable(\{\par
  providedIn: 'root',\par
\})\par
export class SiblingCommunicationService \{\par
  private notifySiblingSource = new Subject<void>();\par
  notifySibling$ = this.notifySiblingSource.asObservable();\par
\par
  notifySibling() \{\par
    this.notifySiblingSource.next();\par
  \}\par
\}\par
\par
Paso 2: Modificar los componentes hermanos\par
Ahora, en el primer componente (SiblingAComponent), llama al m\'e9todo notifySibling() del servicio cuando necesites notificar al segundo componente.\par
\par
\cf6\b // sibling-a.component.ts\par
\cf0\b0 import \{ Component \} from '@angular/core';\par
import \{ SiblingCommunicationService \} from '../sibling-communication.service';\par
\par
@Component(\{\par
  selector: 'app-sibling-a',\par
  template: `<button (click)="notifySibling()">Notify Sibling B</button>`,\par
\})\par
export class SiblingAComponent \{\par
  constructor(private siblingService: SiblingCommunicationService) \{\}\par
\par
  notifySibling() \{\par
    this.siblingService.notifySibling();\par
  \}\par
\}\par
\par
En el segundo componente (SiblingBComponent), suscr\'edbete al observable del servicio y llama a un m\'e9todo local cuando reciba una notificaci\'f3n.\par
\par
\cf6\b // sibling-b.component.ts\par
\cf0\b0 import \{ Component, OnInit \} from '@angular/core';\par
import \{ SiblingCommunicationService \} from '../sibling-communication.service';\par
\par
@Component(\{\par
  selector: 'app-sibling-b',\par
  template: `<p>Sibling B Component</p>`,\par
\})\par
export class SiblingBComponent implements OnInit \{\par
  constructor(private siblingService: SiblingCommunicationService) \{\}\par
\par
  ngOnInit() \{\par
    this.siblingService.notifySibling$.subscribe(() => \{\par
      this.doSomething();\par
    \});\par
  \}\par
\par
  doSomething() \{\par
    console.log('Sibling B received the notification!');\par
    // Aqu\'ed puedes ejecutar cualquier l\'f3gica que necesites.\par
  \}\par
\}\par
\par
////////////////\par
\par
\b Hacer que un div quede encima del otro en pantallas peque\'f1as y uno al lado del otro en pantallas grandes\par
Tambi\'e9n que el div de abajo en pantallas grandes sea m\'e1s largo\par
\b0\par
 <div class="container">\par
        <div class="row">\par
            <div class="col-12 col-lg-2" style="background-color: rgb(132, 0, 255);">1</div>\par
            <div class="col-12 col-lg-10" style="background-color: aqua;">2</div>\par
        </div>\par
    </div>\par
\par
////////////////\par
\par
\b Hacer que los \'edconos se vean horizontales en pantallas peque\'f1as y verticales en grandes\par
\b0\par
 <ul class="list-group list-group-horizontal-sm">     \par
                <li class="list-group-item" *ngIf="!hideAddIcon"><img class="small-icon" src="../../../assets/img/Add.png" alt="Adicionar" (click)="onAddClick()"></li>\par
                <li class="list-group-item" *ngIf="!hideEditIcon"><img class="small-icon" src="../../../assets/img/Edit.png" alt="Editar" (click)="onEditClick()"></li>\par
                <li class="list-group-item" *ngIf="!hideDeleteIcon"><img class="small-icon" src="../../../assets/img/DatoBorrado.png" alt="Borrar" (click)="onDeleteClick()"></li>\par
                <li class="list-group-item" *ngIf="!hideSearchIcon"><img class="small-icon" src="../../../assets/img/Buscar.png" alt="Buscar" (click)="onSearchClick()"></li>\par
                <li class="list-group-item" *ngIf="showSaveAndLogout"><img class="small-icon" src="../../../assets/img/Save.png" alt="Guardar" (click)="onSaveClick()"></li>\par
                <li class="list-group-item" *ngIf="showSaveAndLogout"><img class="small-icon" src="../../../assets/img/Cancel.png" alt="Cancelar" (click)="onClearFormSaveClick()"></li>\par
                <li class="list-group-item" *ngIf="showSaveAndLogout  || showLogout"><img class="small-icon" src="../../../assets/img/Logout.png" alt="Logoutar" (click)="onLogoutClick()"></li>\par
                <li class="list-group-item" *ngIf="showSaveForEditAndLogout"><img class="small-icon" src="../../../assets/img/Save.png" alt="Actualizar" (click)="onSaveForEditClick()"></li>\par
                <li class="list-group-item" *ngIf="showSaveForEditAndLogout"><img class="small-icon" src="../../../assets/img/Cancel.png" alt="Cancelar" (click)="onClearFormForEditClick()"></li>\par
                <li class="list-group-item" *ngIf="showSaveForEditAndLogout"><img class="small-icon" src="../../../assets/img/Logout.png" alt="Logout" (click)="onLogoutForEditClick()"></li>   \par
            </ul>\par
\par
/* profiles.component.css */\par
.container\{\par
    padding-bottom: 20px; \par
    padding-top: 20px;\par
    padding-right: 30px;\par
    /* Asegura que el padding no se incluya en el tama\'f1o total del contenedor */\par
    box-sizing: content-box; \par
    background-color: var(--background-color);\par
\}\par
\par
li\{\par
    background-color: var(--background-color);\par
    border: 0;\par
\}\par
\par
.list-group-horizontal-sm \{\par
    display: flex;\par
    flex-direction: row;\par
    \par
\}\par
\par
.small-icon \{\par
    width: 85px;\par
    height: 85px; \par
    background-color: var(--background-color);\par
\}  \par
  \par
@media (min-width: 992px) \{\par
    .list-group-horizontal-sm \{\par
        flex-direction: column;\par
    \}\par
\par
    .small-icon \{\par
      width: 125px; \par
      height: 125px;\par
    \}\par
\}\par
\par
////////////////\par
\par
\b Bootstrap 5.3 breakpoints\par
\b0 xs: Extra peque\'f1o (menos de 576px)\par
sm: Peque\'f1o (\f1\u8805?\f0 576px)\par
md: Mediano (\f1\u8805?\f0 768px)\par
lg: Grande (\f1\u8805?\f0 992px)\par
xl: Extra grande (\f1\u8805?\f0 1200px)\par
xxl: Doble extra grande (\f1\u8805?\f0 1400px)\par
\par
\f2 <\f0 div\f2  \f0 class\f2 =\f0 "container"\f2 >\f0\par
\f2   <\f0 div\f2  \f0 class\f2 =\f0 "row"\f2 >\f0\par
\f2     <\f0 div\f2  \f0 class\f2 =\f0 "col\f2 -\f0 12\f2  \f0 col\f2 -\f0 md\f2 -\f0 6\f2  \f0 col\f2 -\f0 lg\f2 -\f0 4"\f2 >\f0\par
\f2       \f0 Columna\f2  \f0 1\par
\f2     </\f0 div\f2 >\f0\par
\f2     <\f0 div\f2  \f0 class\f2 =\f0 "col\f2 -\f0 12\f2  \f0 col\f2 -\f0 md\f2 -\f0 6\f2  \f0 col\f2 -\f0 lg\f2 -\f0 4"\f2 >\f0\par
\f2       \f0 Columna\f2  \f0 2\par
\f2     </\f0 div\f2 >\f0\par
\f2     <\f0 div\f2  \f0 class\f2 =\f0 "col\f2 -\f0 12\f2  \f0 col\f2 -\f0 md\f2 -\f0 6\f2  \f0 col\f2 -\f0 lg\f2 -\f0 4"\f2 >\f0\par
\f2       \f0 Columna\f2  \f0 3\par
\f2     </\f0 div\f2 >\f0\par
\f2   </\f0 div\f2 >\f0\par
\f2 </\f0 div\f2 >\par
\f0\par
En\f2  \f0 pantallas\f2  \f0 peque\'f1as\f2  (\f0 xs\f2  \f0 y\f2  \f0 sm\f2 ), \f0 cada\f2  \f0 columna\f2  \f0 ocupa\f2  \f0 las\f2  \f0 12\f2  \f0 columnas\f2  \f0 completas\f2  (\f0 col\f2 -\f0 12\f2 ), \f0 por\f2  \f0 lo\f2  \f0 que\f2  \f0 cada\f2  \f0 una\f2  \f0 se\f2  \f0 mostrar\'e1\f2  \f0 en\f2  \f0 una\f2  \f0 fila\f2  \f0 separada\f2 .\f0\par
En\f2  \f0 pantallas\f2  \f0 medianas\f2  (\f0 md\f2 ), \f0 las\f2  \f0 columnas\f2  \f0 ocupar\'e1n\f2  \f0 6\f2  \f0 columnas\f2  \f0 cada\f2  \f0 una\f2  (\f0 col\f2 -\f0 md\f2 -\f0 6\f2 ), \f0 por\f2  \f0 lo\f2  \f0 que\f2  \f0 se\f2  \f0 mostrar\'e1n\f2  \f0 dos\f2  \f0 por\f2  \f0 fila\f2 .\f0\par
En\f2  \f0 pantallas\f2  \f0 grandes\f2  (\f0 lg\f2 ), \f0 cada\f2  \f0 columna\f2  \f0 ocupar\'e1\f2  \f0 4\f2  \f0 columnas\f2  (\f0 col\f2 -\f0 lg\f2 -\f0 4\f2 ), \f0 por\f2  \f0 lo\f2  \f0 que\f2  \f0 se\f2  \f0 mostrar\'e1n\f2  \f0 tres\f2  \f0 columnas\f2  \f0 por\f2  \f0 fila\f2 .\par
\par
d-none: Oculta el elemento en todas las pantallas.\par
\par
<div class="d-none d-md-block">\par
  Este texto solo se muestra en pantallas medianas o m\'e1s grandes.\par
</div>\par
<div class="d-block d-md-none">\par
  Este texto solo se muestra en pantallas peque\'f1as.\par
</div>\par
\par
\f0\lang10 <div class="p-2 p-md-4">\par
  Contenido con diferente padding seg\'fan el tama\'f1o de la pantalla.\par
</div>\par
Explicaci\'f3n:\par
\par
p-2: Aplica un padding peque\'f1o en todas las pantallas.\par
p-md-4: Aplica un padding m\'e1s grande en pantallas medianas (md) o m\'e1s grandes.\par
\par
<div class="text-center text-lg-start">\par
  Este texto est\'e1 centrado en pantallas peque\'f1as, pero alineado a la izquierda en pantallas grandes.\par
</div>\par
\par
<img src="imagen.jpg" class="img-fluid" alt="Imagen responsive">\par
Explicaci\'f3n:\par
\par
La clase img-fluid hace que la imagen se ajuste al tama\'f1o del contenedor sin exceder su ancho, lo que la convierte en responsive.\par
\par
////////////////\par
\par
\b Interceptar todas las peticiones y ponerles un token encriptado\par
Interceptor\par
\b0 import \{ HttpEvent, HttpHandler, HttpInterceptor, HttpRequest \} from "@angular/common/http";\par
import \{ Injectable \} from "@angular/core";\par
import \{ Observable \} from "rxjs";\par
import \{ CryptoHelper \} from "../../helpers/CryptoHelper";\par
import \{ Router \} from "@angular/router";\par
import \{ LocalStorageService \} from "../../helpers/local-storage.service";\par
\par
@Injectable()\par
export class AuthInterceptor implements HttpInterceptor \{\par
\par
    constructor(\par
        private router: Router,\par
        private localStorageService: LocalStorageService\par
    ) \{\}\par
\par
    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> \{\par
        const tokenEncrypted = localStorage.getItem("token");\par
        console.log(tokenEncrypted);\par
\par
        if (tokenEncrypted) \{\par
            try \{                \par
                if (this.isBase64(tokenEncrypted)) \{\par
                    const decodedToken = atob(tokenEncrypted);\par
                    var token = CryptoHelper.decrypt(tokenEncrypted);\par
\par
                    if (this.isTokenExpired(token)) \{\par
                        this.router.navigate(['/login']);\par
                        // Retornar inmediatamente si el token est\'e1 expirado\par
                        return next.handle(req); \par
                    \}\par
\par
                    const cloned = req.clone(\{\par
                                        //headers: req.headers.set("Authorization", "Bearer" + token)\par
                                        //Alt 96\par
                                        setHeaders: \{Authorization: `Bearer $\{tokenEncrypted\}`\}               \par
                                    \});                    \par
\par
                    return next.handle(cloned);\par
                \} else \{\par
                    const encodedToken = btoa(tokenEncrypted);\par
                    const cloned = req.clone(\{\par
                        setHeaders: \{Authorization: `Bearer $\{encodedToken\}`\}\par
                    \});\par
                    return next.handle(req);\par
                \}\par
            \} catch (e) \{\par
                console.error("Error decoding the token:", e);\par
                this.router.navigate(['/error']); \par
                return next.handle(req);\par
            \}\par
        \} else \{\par
            return next.handle(req);\par
        \}\par
    \}\par
    \par
    private isBase64(str: string): boolean \{\par
        try \{\par
            return btoa(atob(str)) === str;\par
        \} catch (err) \{\par
            return false;\par
        \}\par
    \}\par
\par
    private isTokenExpired(token: string): boolean \{\par
        try \{\par
            const payload = JSON.parse(atob(token.split('.')[1]));\par
            const expiry = payload.exp;\par
            return (Math.floor((new Date).getTime() / 1000)) >= expiry;\par
        \} catch (e) \{\par
            console.error("Error parsing token payload:", e);\par
            // Considerar el token como expirado si no se puede parsear\par
            return true; \par
        \}\par
    \}\par
\}\par
\par
import \{ Injectable \} from '@angular/core';\par
import \{ CryptoHelper \} from '../helpers/CryptoHelper';\par
\par
@Injectable(\{\par
  providedIn: 'root'\par
\})\par
export class LocalStorageService \{\par
\par
  constructor() \{ \}\par
 \par
  setToken(key: string, data: any): void \{\par
    const encrypted = CryptoHelper.encrypt(data);\par
    localStorage.setItem(key, encrypted);    \par
  \}\par
\par
  setData(key: string, data: any): void \{\par
    localStorage.setItem(key, data);    \par
  \}\par
  \par
  getData(key: string): any \{   \par
    return localStorage.getItem(key);   \par
  \}\par
\par
  removeData(key: string): void \{\par
    localStorage.removeItem(key);\par
  \}\par
\par
  removeAllData(): void \{\par
    localStorage.clear();\par
  \}\par
\par
  isEmpty(): boolean \{\par
    return localStorage.length === 0;\par
  \}\par
\}\par
\par
import * as CryptoJS from 'crypto-js';\par
\par
export class CryptoHelper \{\par
  private static readonly Key = CryptoJS.enc.Utf8.parse('1234567890123456'); // 16 bytes\par
  private static readonly Iv = CryptoJS.enc.Utf8.parse('1234567890123456'); // 16 bytes\par
\par
  static encrypt(data: any): string \{\par
    const jsonData = JSON.stringify(data);\par
    const encryptedData = CryptoJS.AES.encrypt(jsonData, CryptoHelper.Key, \{ iv: CryptoHelper.Iv \}).toString();\par
    return encryptedData;\par
  \}\par
\par
  static decrypt(data: string): any \{\par
    try \{      \par
      const base64Data = this.ensureBase64(data);\par
\par
      const decryptedDataBytes = CryptoJS.AES.decrypt(base64Data, CryptoHelper.Key, \{ iv: CryptoHelper.Iv \});\par
      const decryptedDataStr = decryptedDataBytes.toString(CryptoJS.enc.Utf8);\par
      \par
      if (!this.isValidJson(decryptedDataStr)) \{\par
        throw new Error("El dato desencriptado no es un JSON v\'e1lido");\par
      \}\par
\par
      return JSON.parse(decryptedDataStr);\par
    \} catch (error) \{\par
      console.error("Error al desencriptar los datos: ", error);\par
      throw error;\par
    \}\par
  \}\par
  \par
  private static ensureBase64(data: string): string \{\par
    if (!this.isBase64(data)) \{      \par
      try \{\par
        // Convertir a base64 si es necesario\par
        return btoa(unescape(encodeURIComponent(data)));\par
      \} catch (e) \{\par
        console.error("Error al convertir la cadena a base64:", e);\par
        throw new Error("La cadena no se pudo convertir a base64");\par
      \}\par
    \}\par
    return data;\par
  \}\par
  \par
  private static isBase64(str: string): boolean \{\par
    try \{\par
      return btoa(atob(str)) === str;\par
    \} catch (e) \{\par
      return false;\par
    \}\par
  \}\par
  \par
  private static isValidJson(str: string): boolean \{\par
    try \{\par
      JSON.parse(str);\par
      return true;\par
    \} catch (e) \{\par
      return false;\par
    \}\par
  \}\par
\}\par
\par
////////////////\par
\par
\b Hacer que un div quede arriba y otro abajo con bootstrap 5.3\b0\par
<div class="container d-flex flex-column">\par
    <div class="p-2 bg-primary text-white">1</div>\par
    <div class="p-2 bg-secondary text-white">2</div>\par
</div>\par
\par
////////////////\par
\par
\b tabs de bootstrap explicados\par
\b0 <ul class="nav nav-tabs mb-3" id="myTab" role="tablist">\par
      <li class="nav-item" role="presentation">\par
        <button class="nav-link active" id="management-tab" data-bs-toggle="tab" data-bs-target="#management" type="button" role="tab" aria-controls="management" aria-selected="true">Management</button>\par
      </li>\par
      <li class="nav-item" role="presentation">\par
        <button class="nav-link" id="options-tab" data-bs-toggle="tab" data-bs-target="#options" type="button" role="tab" aria-controls="options" aria-selected="false">Options</button>\par
      </li>\par
    </ul>\par
  \par
    <div class="tab-content" id="myTabContent">\par
      <div class="tab-pane fade show active" id="management" role="tabpanel" aria-labelledby="management-tab">\par
...\par
</di>\par
\par
<div class="tab-pane fade" id="options" role="tabpanel" aria-labelledby="options-tab">\par
        <app-profiles-options></app-profiles-options>\par
      </div>\par
</div><!-- myTabContent -->\par
\par
Secci\'f3n <ul class="nav nav-tabs mb-3" id="myTab" role="tablist">\par
<ul>: Es una lista no ordenada que sirve como contenedor para los elementos de las pesta\'f1as.\par
class="nav nav-tabs mb-3": Aplica estilos de Bootstrap para crear una barra de pesta\'f1as (nav-tabs). El mb-3 a\'f1ade un margen inferior.\par
id="myTab": Es un identificador \'fanico para la lista de pesta\'f1as. Puede ser \'fatil para referenciarla desde el JavaScript o CSS.\par
role="tablist": Define que este contenedor es una lista de pesta\'f1as para accesibilidad.\par
Secci\'f3n <li class="nav-item" role="presentation">\par
<li>: Representa un elemento de la lista (una pesta\'f1a individual).\par
class="nav-item": Aplica el estilo de Bootstrap para los elementos de la barra de navegaci\'f3n.\par
role="presentation": Es un atributo de accesibilidad que indica que este elemento solo tiene fines de presentaci\'f3n.\par
Secci\'f3n <button class="nav-link active" ...>\par
<button>: Representa cada pesta\'f1a y se utiliza para seleccionar la pesta\'f1a correspondiente.\par
class="nav-link active": Aplica el estilo de Bootstrap para una pesta\'f1a (nav-link). La clase active indica que esta pesta\'f1a es la que est\'e1 seleccionada por defecto.\par
id="management-tab": Identificador \'fanico para esta pesta\'f1a, utilizado para asociar el contenido con la pesta\'f1a.\par
data-bs-toggle="tab": Indica a Bootstrap que este bot\'f3n act\'faa como un interruptor de pesta\'f1as.\par
data-bs-target="#management": Especifica el contenido (div) que se mostrar\'e1 cuando esta pesta\'f1a est\'e9 activa. Aqu\'ed apunta al contenido con el id="management".\par
type="button": Especifica que este elemento es un bot\'f3n.\par
role="tab": Define este bot\'f3n como una pesta\'f1a para accesibilidad.\par
aria-controls="management": Indica qu\'e9 secci\'f3n de contenido controla esta pesta\'f1a.\par
aria-selected="true": Indica que esta pesta\'f1a est\'e1 seleccionada por defecto.\par
Secci\'f3n <div class="tab-pane fade" id="options" role="tabpanel" aria-labelledby="options-tab">\par
<div>: Contenedor para el contenido asociado a la pesta\'f1a "Options".\par
class="tab-pane fade": Aplica estilos de Bootstrap. tab-pane define un contenedor de contenido asociado a una pesta\'f1a, y fade agrega una transici\'f3n de desvanecimiento cuando se muestra.\par
id="options": Identificador \'fanico de este contenedor, que coincide con el data-bs-target de la pesta\'f1a correspondiente.\par
role="tabpanel": Define este contenedor como un panel de pesta\'f1as para accesibilidad.\par
aria-labelledby="options-tab": Indica qu\'e9 pesta\'f1a est\'e1 asociada con este contenido.\par
\par
/////////////////\par
\par
lograr que un div tenga una altura fija y que aparezca un scrollbar (barra de desplazamiento) cuando el contenido exceda esa altura, utilizando tanto Bootstrap 5.3 como CSS.\par
\par
Opci\'f3n 1: Usando CSS\par
Puedes utilizar las propiedades height y overflow-y para controlar la altura y el comportamiento del scrollbar:\par
\par
css\par
Copiar c\'f3digo\par
.scrollable-div \{\par
  height: 300px; /* Altura fija del div */\par
  overflow-y: auto; /* Muestra un scrollbar si el contenido es m\'e1s alto */\par
  border: 1px solid #ccc; /* Opcional: agregar un borde para visualizar mejor el div */\par
\}\par
Opci\'f3n 2: Usando Bootstrap 5.3\par
Bootstrap 5.3 ofrece utilidades de desbordamiento (overflow) que puedes usar directamente en el div sin necesidad de escribir CSS personalizado:\par
\par
html\par
Copiar c\'f3digo\par
<div class="overflow-auto" style="height: 300px; border: 1px solid #ccc;">\par
  <!-- Contenido largo que podr\'eda causar desbordamiento -->\par
</div>\par
Explicaci\'f3n:\par
height: 300px;: Define una altura fija para el div. Puedes ajustarlo seg\'fan tus necesidades.\par
overflow-y: auto;: Configura el div para mostrar un scrollbar vertical solo si el contenido excede la altura establecida. Si usas overflow: auto;, se aplicar\'e1 tanto a la dimensi\'f3n horizontal como a la vertical.\par
overflow-auto (Bootstrap): Esta clase de Bootstrap es equivalente a overflow: auto; en CSS y gestiona el desbordamiento autom\'e1ticamente, a\'f1adiendo un scrollbar solo cuando es necesario.\par
\par
///////////////////\par
\par
\par
\par
}
 
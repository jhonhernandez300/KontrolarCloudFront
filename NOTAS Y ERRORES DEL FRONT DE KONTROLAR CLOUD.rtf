{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang3082{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\colortbl ;\red255\green255\blue0;\red0\green255\blue0;\red0\green77\blue187;\red155\green0\blue211;\red255\green0\blue0;}
{\*\generator Riched20 10.0.22621}\viewkind4\uc1 
\pard\sl240\slmult1\qc\f0\fs32\lang10 NOTAS Y ERRORES DEL FRONT DE KONTROLAR CLOUD\fs22\par

\pard\sl240\slmult1\par
1\par

\pard\sa200\sl240\slmult1 ////////////////////            1\par

\pard\sl240\slmult1\b Q tengo instalado?\b0\par
Angular CLI: 17.0.0\par
Node: 20.14.0\par
Package Manager: npm 10.7.0\par
\par
////////////////////////           1\par
\par
\b Como saber qu\'e9 versi\'f3n de Angular tengo?\b0\par
ng version\par
\par
///////////////////////////            1\par
\par
\b Como llenar un dropdown?\par
\b0 Seleccionar los company names\par
Usar el primer company name para llenar por defecto el dropdown\par
Dejar los demas company names como opciones\par
\par
companyNames: string[] = [];\par
  selectedCompany: string;\par
\par
this.\ul companyNames \ulnone = response.map((company: any) => company.companyName);\par
if (this.\ul companyNames\ulnone .length > 0) \{\par
            this.\highlight1 selectedCompany \highlight0 = this.\ul companyNames\ulnone [0];\par
\}\par
\par
<div class="mb-3">\par
  <label for="companyName" class="form-label">Nombre de la Compa\'f1\'eda</label>\par
  <select class="form-control" \par
\tab id="companyName" \par
\tab [(ngModel)]="\highlight1 selectedCompany\highlight0 " \par
\tab [disabled]="!\ul companyNames\ulnone .length"\par
>\par
\tab <option *ngFor="let companyName of \ul companyNames\ulnone " [value]="companyName">\tab\tab\{\{ companyName \}\}\par
\tab </option>\par
  </select>\par
</div>\par
\par
///////////////////          1\par
\par
\b Uso de ViewChild\par
\b0 @ViewChild('passwordInput', \{ static: false \}) passwordInput: ElementRef | null = null;\par
\par
Usa el decorador @ViewChild con \{ static: false \} para asegurarse de que el elemento solo sea referenciado despu\'e9s de que el componente se haya inicializado completamente.\par
\par
Aseg\'farate de que el campo de contrase\'f1a tenga el atributo #passwordInput para que pueda ser referenciado por ViewChild.\par
\par
Se utiliza para obtener una referencia a un componente, directiva o elemento DOM en la plantilla. Esto puede ser \'fatil cuando necesitas interactuar con elementos del DOM o componentes hijos directamente en tu clase de componente.\par
\par
Crea un componente hijo al que te referir\'e1s desde el componente padre.\par
ng generate component child\par
\par
En el archivo child.component.ts, define una propiedad y un m\'e9todo:\par
import \{ Component \} from '@angular/core';\par
\par
@Component(\{\par
  selector: 'app-child',\par
  templateUrl: './child.component.html',\par
  styleUrls: ['./child.component.css']\par
\})\par
export class ChildComponent \{\par
  message: string = 'Hello from the child component!';\par
\par
  showMessage() \{\par
    alert(this.message);\par
  \}\par
\}\par
\par
En el archivo child.component.html:\par
<p>\{\{ message \}\}</p>\par
<button (click)="showMessage()">Show Message</button>\par
\par
En el componente padre refi\'e9rete al componente hijo utilizando ViewChild\par
// app.component.ts\par
import \{ Component, ViewChild, AfterViewInit \} from '@angular/core';\par
import \{ ChildComponent \} from './child/child.component';\par
\par
@Component(\{\par
  selector: 'app-root',\par
  templateUrl: './app.component.html',\par
  styleUrls: ['./app.component.css']\par
\})\par
export class AppComponent implements AfterViewInit \{\par
  @ViewChild(ChildComponent) childComponent!: ChildComponent;\par
\par
  ngAfterViewInit() \{\par
    // Puedes acceder a las propiedades y m\'e9todos del componente hijo aqu\'ed\par
    console.log(this.childComponent.message);\par
  \}\par
\par
  callChildMethod() \{\par
    this.childComponent.showMessage();\par
  \}\par
\}\par
\par
En app.component.html:\par
<app-child></app-child>\par
<button (click)="callChildMethod()">Call Child Method</button>\par
\par
//////////////////////          1\par
\par
\b Activar bot\'f3n\par
\b0 <button type="submit" class="btn btn-primary w-100" [disabled]="!\ul isCompanySelected\ulnone ">Iniciar Sesi\'f3n</button>\par
\par
\ul isCompanySelected\ulnone : boolean = false;\par
\par
Cuando el servicio devuelve datos:\par
this.\ul isCompanySelected \ulnone = true;\par
\par
////////////////////////////        1\par
\par
\b Convertir a texto\b0\par
this.documentNumber.toString()\par
\par
///////////////////////////         1\par
\par
\b Mostrar un cuadro de di\'e1logo\b0\par
<input type="text" \par
\tab class="form-control" \par
\tab id="documentNumber" \par
\tab name="documentNumber"\par
              placeholder="Ej. 71789632" \par
\tab [(ngModel)]="\ul documentNumber\ulnone "\par
>\par
\par
<!-- Modal -->\par
<div class="modal fade" id="\b errorModal\b0 " tabindex="-1" aria-labelledby="errorModalLabel" aria-hidden="true">\par
    <div class="modal-dialog">\par
      <div class="modal-content">\par
        <div class="modal-header">\par
          <h5 class="modal-title" id="errorModalLabel">Error</h5>\par
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>\par
        </div>\par
        <div class="modal-body">\par
          \{\{ \highlight1 modalMessage \highlight0\}\}\par
        </div>\par
        <div class="modal-footer">\par
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>\par
        </div>\par
      </div>\par
    </div>\par
  </div>\par
\par
\ul documentNumber\ulnone : number = 0;\par
\par
Evento del bot\'f3n\par
if (!this.\ul documentNumber\ulnone ) \{\par
this.showModal('N\'famero de documento no puede estar vac\'edo');\par
\par
showModal(message: string): void \{\par
    this.\highlight1 modalMessage \highlight0 = message;\par
    const modalElement = document.getElementById('\b errorModal\b0 ');\par
\par
    if (modalElement) \{\par
      const modal = new bootstrap.Modal(modalElement);\par
      modal.show();\par
    \} else \{\par
      console.error('No se encontr\'f3 el elemento modal con id "errorModal".');\par
    \}\par
  \}\par
\par
//////////////////////////        1\par
\par
\b Encriptar y desencriptar\b0\par
npm install crypto-js\par
\par
import * as CryptoJS from 'crypto-js';\par
\par
export class \highlight2 CryptoHelper\highlight0  \{\par
  private static readonly Key = CryptoJS.enc.Utf8.parse('1234567890123456'); // 16 bytes\par
  private static readonly Iv = CryptoJS.enc.Utf8.parse('1234567890123456'); // 16 bytes\par
\par
  static \cf3\b encrypt\cf0\b0 (data: any): string \{\par
    const \b jsonData \b0 = JSON.stringify(data);\par
    const \ul encryptedData \ulnone = CryptoJS.AES.encrypt(\par
\tab\b jsonData\b0 , \par
\tab CryptoHelper.Key, \par
\tab\{ iv: CryptoHelper.Iv \}\par
    ).toString();\par
    return \ul encryptedData\ulnone ;\par
  \}\par
\par
  static \cf4\b decrypt\cf0\b0 (\highlight1 encryptedData\highlight0 : string): any \{\par
    const bytes = CryptoJS.AES.decrypt(\par
\tab\highlight1 encryptedData\highlight0 , \par
\tab CryptoHelper.Key, \par
\tab\{ iv: CryptoHelper.Iv \}\par
    );\par
    const decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\par
    return decryptedData;\par
  \}\par
\}\par
\par
En el servicio:\par
GetCompaniesByDocumentNumber(documentNumber: number): Observable<any> \{\par
    const encryptedDocumentNumber = \highlight2 CryptoHelper\highlight0 .\cf3\b encrypt\cf0\b0 (\par
      documentNumber.toString()\par
    );\par
    //console.log("encryptedDocumentNumber ", encryptedDocumentNumber);\par
    return this.http\par
      .get(\par
        `$\{this.apiUrl\}/GetCompaniesByDocumentNumber/$\{encodeURIComponent(\par
          encryptedDocumentNumber\par
        )\}`,\par
        \{ responseType: 'text' \}\par
      )\par
      .pipe(\par
        map((encryptedData) => \{\par
          //console.log("encryptedData ", encryptedData);\par
          return \highlight2 CryptoHelper\highlight0 .\cf4\b decrypt\cf0\b0 (encryptedData);\par
        \})\par
      );\par
  \}\par
\par
//////////////////////////      1\par
\par
\b Mostrar modal luego de validaci\'f3n\par
\b0 En el componente:\par
handleConsultCompanies(): void \{\par
  const numberPattern = /^\\d+$/;\par
\par
  if (!this.documentNumber) \{\par
    this.\cf5\b showModal\cf0\b0 ('N\'famero de documento no puede estar vac\'edo');\par
    return;\par
  \} else if (!numberPattern.test(this.documentNumber.toString())) \{   \par
    this.\cf5\b showModal\cf0\b0 ('N\'famero de documento debe contener solo n\'fameros');\par
    return;\par
  \}\par
\par
/////////////////////            1\par
\par
\b Como guardar en el localStorage\par
\b0 Crear un servicio y ah\'ed poner:\par
 \highlight1 setData\highlight0 (key: string, data: any): void \{\par
    \cf5\b localStorage\cf0\b0 .setItem(key, JSON.stringify(data));    \par
  \}\par
  \par
  getData(key: string): any \{\par
    const data = \cf5\b localStorage\cf0\b0 .getItem(key);\par
    return data ? JSON.parse(data) : null;    \par
  \}\par
\par
  removeData(key: string): void \{\par
    \cf5\b localStorage\cf0\b0 .removeItem(key);\par
  \}\par
\par
  removeAllData(): void \{\par
    \cf5\b localStorage\cf0\b0 .clear();\par
  \}\par
\par
  isEmpty(): boolean \{\par
    return \cf5\b localStorage\cf0\b0 .length === 0;\par
  \}\par
\par
En el componente:\par
import \{ LocalStorageService \} from '../../helpers/local-storage.service';\par
\par
constructor(\par
\tab private userService: UserService, \par
\tab private localStorageService: LocalStorageService\par
) \{\}\par
\par
this.localStorageService.\highlight1 setData\highlight0 ('token', this.token);\par
\par
///////////////////////\par
\par
\b Implementar el authguard\par
\b0 En el componente:\par
handleLogin(): void \{    \par
    //console.log("this.password ", this.password);\par
    //console.log("this.companyPassword ", this.companyPassword);\par
    if (!this.password) \{\par
      console.error('N\'famero de documento no puede estar vac\'edo');\par
      this.showModal('El password de la compa\'f1\'eda no puede estar vac\'edo');\par
      return;\par
    \}else if (this.password === this.companyPassword) \{\par
      //console.log('Contrase\'f1a correcta ', this.password, this.companyPassword);      \par
      this.getToken();\par
      console.log("this.token ", this.token);\par
      this.localStorageService.setData('token', this.token);\par
      const currentDate = new Date();\par
      const dateString = currentDate.toISOString();        \par
      localStorage.setItem('last date', dateString);\par
      this.router.navigate(['/bienvenido']);\par
    \} else \{\par
      //console.log('Contrase\'f1a incorrecta. Verifica tus credenciales.');\par
      this.showModal('Contrase\'f1a incorrecta. Verifica tus credenciales.');\par
    \}    \par
  \}\par
\par
El guard se genera as\'ed:\par
ng generate guard guards/auth\par
auth.guard.ts\par
import \{ CanActivateChildFn, CanActivateFn \} from '@angular/router';\par
import \{ Injectable, inject \} from '@angular/core';\par
import \{ CanActivate, Router \} from '@angular/router';\par
import \{ UserService \} from '../services/user/user.service';\par
import \{ CanActivateChild, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree \} from '@angular/router';\par
import \{ Observable, throwError \} from 'rxjs';\par
import \{ catchError, map \} from 'rxjs/operators';\par
\par
export const canActivateGuard: CanActivateFn = (  \par
  route: ActivatedRouteSnapshot,\par
  state: RouterStateSnapshot\par
) => \{   \par
  if(inject(UserService).IsAuthenticated())\{\par
    return true;\par
  \}else \{\par
    inject(Router).navigate(['/login']);\par
    return false;\par
  \}\par
\}; \par
\par
El servicio\par
import \{ Injectable \} from '@angular/core';\par
import \{ Observable \} from 'rxjs';\par
import \{ HttpClient, HttpHeaders \} from '@angular/common/http';\par
import \{ iCompany \} from '../../models/iCompany';\par
import \{ map \} from 'rxjs/operators';\par
import \{ CryptoHelper \} from '../../helpers/CryptoHelper';\par
\par
IsAuthenticated(): boolean\{  \par
    const lastDate = localStorage.getItem('last date');      \par
    console.log("lastDate ", lastDate);\par
\par
    if (lastDate === null) \{   \par
      this.lastDate = new Date(1900, 0, 1, 0, 0, 0); \par
    \}else \{\par
      this.lastDate = new Date(lastDate);\par
    \}  \par
  \par
    const fechaHoraActual = new Date();\par
    const diferenciaMs = this.lastDate.getTime() - this.fechaHoraActual.getTime(); \par
       \par
      // Convertir la diferencia de milisegundos a minutos\par
    const diferenciaMinutos = diferenciaMs / (1000 * 60);  \par
    console.log("(-1 * diferenciaMinutos) ", (-1 * diferenciaMinutos));\par
      // Comprobar si la diferencia es mayor a 20 minutos\par
    if((-1 * diferenciaMinutos) > 20)  \{\par
      return false;\par
    \}else\{\par
      return true;\par
    \}    \par
  \}\par
\par
app.module\par
import \{ NgModule, isDevMode \} from '@angular/core';\par
import \{ BrowserModule \} from '@angular/platform-browser';\par
import \{ HttpClientModule \} from '@angular/common/http';\par
import \{ FormsModule \} from '@angular/forms';\par
import \{ HTTP_INTERCEPTORS \} from '@angular/common/http';\par
\par
providers: [\{\par
    provide: HTTP_INTERCEPTORS,\par
    useClass: AuthInterceptor,\par
    multi: true\par
  \}],\par
\par
authInterceptor.ts\par
import \{ HttpEvent, HttpHandler, HttpInterceptor, HttpRequest \} from "@angular/common/http";\par
import \{ Injectable \} from "@angular/core";\par
import \{ Observable \} from "rxjs";\par
\par
@Injectable()\par
export class AuthInterceptor implements HttpInterceptor \{\par
    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> \{\par
        const token = localStorage.getItem("token");\par
\par
        if(token)\{\par
            const cloned = req.clone(\{\par
                //headers: req.headers.set("Authorization", "Bearer" + token)\par
                //Alt 96\par
                setHeaders: \{Authorization: `Bearer $\{token\}`\}\par
            \});\par
\par
            return next.handle(cloned);            \par
        \}\par
        else\par
        \{\par
            return next.handle(req);\par
        \}\par
    \}\par
\}\par
\par
app-routing.module\par
import \{ RouterModule, Routes \} from '@angular/router';\par
import \{ canActivateGuard \} from '../app/helpers/auth.guard';\par
\par
const routes: Routes = [\par
  \{ path: 'bienvenido', \par
    component: BienvenidoComponent, \par
    canActivate: [canActivateGuard]\par
  \},\par
\par
 exports: [RouterModule]\par
\par
////////////////////////////////////////\par
\par
\b Como traducir a otro idioma internationalization\b0\par
ng add @angular/localize\par
Y\par
\par
En angular.json > projects\par
"Nombre del proyecto": \{\par
"i18n": \{\par
"sourceLocale": "en-US",\par
"locales": \{\par
\tab "es-PR": "src/locale/messages.es.xlf"\par
\tab\}\par
\}\par
\par
O poner:\par
 "i18n": \{\par
        "sourceLocale": "es-CO",\par
        "locales": \{\par
          "en-US": "src/locale/messages.en.xlf"\par
        \}\par
      \},\par
\par
En architect > build > options\par
"localize": ["es-PR"],\par
\par
En el html poner\par
i18n\par
\{\{ "la fecha" | date\}\} o | currency\par
\par
En la consola:\par
ng extract-i18n --output-path src/locale\par
cp src/locale/messages.xlf src/locale/messages.es.xlf\par
\par
Abrir el archivo messages.es.xlf\par
Agregar <target> traducci\'f3n </target>\par
\par
////////////////\par
\par
\b Crear un dropdown para los idiomas\b0\par
angular.json\par
"projects": \{\par
    "kontrolar-cloud-pwa": \{     \par
      \b "i18n": \{\par
        "sourceLocale": "es-CO",\par
        "locales": \{\par
          "en-US": "src/locale/messages.en.xlf",\par
          "pt-PT": "src/locale/messages.pt.xlf"\par
        \}\par
      \},\par
\b0 contin\'faa...\par
"architect": \{\par
        "build": \{\par
          "builder": "@angular-devkit/build-angular:application",\par
          "options": \{\par
         \b    "localize": ["es-CO", "en-US", "pt-PT"],\par
\b0\par
app.component.ts\par
import \{ LanguageServiceService \} from '../app/services/language-service.service';\par
\par
 constructor(    \par
    private languageService: LanguageServiceService\par
  ) \{\}\par
\par
setLanguage(event: Event) \{\par
    const selectElement = event.target as HTMLSelectElement;\par
    const language = selectElement.value;\par
    this.languageService.setLanguage(language);\par
  \}\par
\par
app.component.html\par
<nav class="navbar navbar-expand-lg navbar-light bg-light">\par
    <div class="container-fluid">\par
      <a class="navbar-brand" href="#">Mi Aplicaci\'f3n</a>\par
      <div class="d-flex">\par
        <select class="form-select" (change)="setLanguage($event)">\par
          <option value="es-CO">Espa\'f1ol</option>\par
          <option value="en-US">English</option>\par
          <option value="pt-PT">Portugu\'eas</option>\par
        </select>\par
      </div>\par
    </div>\par
</nav>\par
<div class="container">\par
    <router-outlet></router-outlet>\par
  </div>\par
\par
language-service.service\par
import \{ Injectable \} from '@angular/core';\par
import \{ Location \} from '@angular/common';\par
import \{ TranslateService \} from '@ngx-translate/core';\par
\par
@Injectable(\{\par
  providedIn: 'root'\par
\})\par
export class LanguageServiceService \{\par
\par
  constructor(private translate: TranslateService, private location: Location) \{\par
    this.translate.setDefaultLang('es-CO');\par
  \}\par
\par
  setLanguage(language: string) \{\par
    //console.log("language al llegar al servicio ", language);\par
    this.translate.use(language).subscribe(() => \{\par
      this.location.replaceState(this.location.path(), '', \{ lang: language \});\par
    \});\par
  \}\par
\}\par
\par
login.component.html\par
<div class="container d-flex justify-content-center align-items-center vh-100">\par
  <div class="card" style="width: 25rem;">\par
    <div class="card-body">\par
      <h5 translate class="card-title text-center">TITLE</h5>\par
      <form>\par
        <div class="mb-3 d-flex flex-column align-items-center">\par
          <label translate for="documentNumber" class="form-label">DOCUMENT_NUMBER</label>\par
          <div class="input-group">\par
            <input type="text" class="form-control" id="documentNumber" name="documentNumber"\par
                   placeholder="Ej. 71789632" [(ngModel)]="documentNumber">\par
          </div>\par
          <button translate class="btn btn-primary mt-2" (click)="handleConsultCompanies()">CONSULT_COMPANIES</button>\par
        </div>\par
\par
        <div class="mb-3">\par
          <label translate for="companyName" class="form-label">COMPANY_NAME</label>\par
          <select class="form-control" id="companyName" name="companyName"\par
                  [(ngModel)]="selectedCompany" [disabled]="!companyNames.length"\par
                  (change)="updateCompanyPassword()">\par
            <option *ngFor="let companyName of companyNames" [value]="companyName">\{\{ companyName \}\}</option>\par
          </select>\par
        </div>\par
\par
        <div class="mb-3" *ngIf="isCompanySelected">\par
          <label translate for="password" class="form-label">COMPANY_PASSWORD</label>\par
          <input type="password" class="form-control" id="password" name="password"\par
                 placeholder="Password" [(ngModel)]="password" #passwordInput>\par
        </div>\par
\par
        <button translate type="button" class="btn btn-primary w-100"\par
                [disabled]="!isCompanySelected" (click)="handleLogin()">LOGIN</button>\par
      </form>\par
      \par
    </div>\par
  </div>\par
</div>\par
\par
app.module.ts\par
Despu\'e9s de los imports\par
export function HttpLoaderFactory(http: HttpClient) \{\par
  return new TranslateHttpLoader(http, './assets/i18n/', '.json');\par
\}\par
\par
En imports\par
TranslateModule.forRoot(\{\par
      loader: \{\par
        provide: TranslateLoader,\par
        useFactory: HttpLoaderFactory,\par
        deps: [HttpClient]\par
      \}\par
    \}),\par
\par
En la carpeta assets se crea la carpet i18n, adentro se ponen los archivos para los idiomas, este es el de espa\'f1ol\par
\{\par
    "TITLE": "Inicio de Sesi\'f3n",\par
    "DOCUMENT_NUMBER": "N\'famero de Documento",\par
    "CONSULT_COMPANIES": "Consultar Compa\'f1\'edas",\par
    "COMPANY_NAME": "Nombre de la Compa\'f1\'eda",\par
    "COMPANY_PASSWORD": "Password de la Compa\'f1\'eda",\par
    "LOGIN": "Iniciar Sesi\'f3n",\par
    "ERROR": "Error",\par
    "CLOSE": "Cerrar"\par
  \}\par
\par
En la consola\par
npm install @ngx-translate/core @ngx-translate/http-loader\par
\par
////////////////\par
\par
\b Como crear un helper y usarlo\par
\b0 export class DateFormatter \{\par
\par
    public formatDate(date: Date): string \{\par
        const year = date.getFullYear();\par
        const month = (date.getMonth() + 1).toString().padStart(2, '0');\par
        const day = date.getDate().toString().padStart(2, '0');\par
    \par
        return `$\{year\}-$\{month\}-$\{day\}`;\par
    \}\par
\}\par
\par
En el componente que lo usa:\par
const date = new Date(response[selectedCompanyIndex]['LicenseValidDate']);\par
const dateFormatter = new DateFormatter();\par
this.licenseValidDate = dateFormatter.formatDate(date);\par
\par
////////////////\par
\par
\b C\'f3mo traducir los mensajes del modal\par
\b0 <!-- Modal -->\par
<div class="modal fade" id="errorModal" tabindex="-1" aria-labelledby="errorModalLabel" aria-hidden="true">\par
  <div class="modal-dialog">\par
    <div class="modal-content">\par
      <div class="modal-header">\par
        <h5 translate class="modal-title" id="errorModalLabel">ERROR</h5>\par
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>\par
      </div>\par
      <div translate class="modal-body">\par
        \{\{ modalMessage \}\}\par
      </div>\par
      <div class="modal-footer">\par
        <button translate type="button" class="btn btn-secondary" data-bs-dismiss="modal">CLOSE</button>\par
      </div>\par
    </div>\par
  </div>\par
</div>\par
\par
import \{ TranslateService \} from '@ngx-translate/core';\par
\par
En el constructor:\par
private translate: TranslateService\par
\par
private showModal(messageKey: string): void \{\par
    this.translate.get(messageKey).subscribe((translatedMessage: string) => \{\par
      this.modalMessage = translatedMessage;\par
      const modalElement = document.getElementById('errorModal');\par
      if (modalElement) \{\par
        const modal = new bootstrap.Modal(modalElement);\par
        modal.show();\par
      \} else \{\par
        console.error('No se encontr\'f3 el elemento modal con id "errorModal".');\par
      \}\par
    \});\par
  \}\par
\par
this.showModal('IDENTIFICATION_NUMBER_CANNOT_BE_EMPTY');\par
\par
En los archivos q est\'e1n en la ubicaci\'f3n assets > i18n (traducido para cada idioma en el lado derecho)\par
"IDENTIFICATION_NUMBER_CANNOT_BE_EMPTY":"Identification number cannot be empty"\par
\par
////////////////\par
\par
\b Determinar desde la bd el color de un bot\'f3n\par
Determinar en la bd el \'edcono\par
\b0 <button class="accordion-button collapsed \{\{ modulo.claseModulo \}\}" \par
          type="button" \par
          data-bs-toggle="collapse" \par
          [attr.data-bs-target]="'#collapse' + i" \par
          aria-expanded="false" \par
          [attr.aria-controls]="'collapse' + i"\par
          [ngStyle]="\{'background-color': modulo.colorModule\}"\par
        >\par
          <i [class]="modulo.iconoModulo"></i>      \par
          <span style="margin-left: 30px;">\{\{ modulo.nombreModulo \}\}</span>\par
</button>\par
\par
////////////////\par
\par
\b Como traducir un men\'fa seg\'fan lo q se escoja en el dropdown de otro componente\par
\b0 angular.json\par
"projects": \{\par
    "kontrolar-cloud-pwa": \{     \par
      "i18n": \{\par
        "sourceLocale": "es-CO",\par
        "locales": \{\par
          "en-US": "src/locale/messages.en.xlf",\par
          "pt-PT": "src/locale/messages.pt.xlf"\par
        \}\par
      \},\par
\par
"architect": \{\par
        "build": \{\par
          "builder": "@angular-devkit/build-angular:application",\par
          "options": \{\par
            "localize": ["es-CO", "en-US", "pt-PT"],\par
\par
instalar ngx translate\par
\par
En assets crear la carpeta i18n y adentro poner los archivos en-US.json, es-CO.json y pt-PT.json, el primero tiene:\par
\{\par
"IDENTIFICATION_NUMBER_MUST_HAVE_ONLY_NUMBERS": "O n\'famero de identifica\'e7\'e3o deve conter apenas n\'fameros",\par
  "INCORRECT_PASSWORD_VERIFY_YOUR_CREDENTIALS": "Senha incorreta verifique suas credenciais",\par
  "LOGIN": "Iniciar Sess\'e3o",\par
  "MODULES": \{\par
    "COMPRAS": "Compras",\par
    "PRODUCCION": "Produ\'e7\'e3o",\par
    "INVENTARIO": "Invent\'e1rio",\par
    "FACTURACION": "Fatura\'e7\'e3o",\par
    "TRANSPORTE": "Transporte",\par
    "CONSULTAS RAPIDAS": "Consultas R\'e1pidas",\par
    "MAESTROS": "Mestres",\par
    "CONFIGURACION TECNICA": "Configura\'e7\'e3o T\'e9cnica",\par
    "MOVIMIENTOS DE COMPRAS": "Movimentos de Compras",\par
    "CXP": "CXP",\par
    "CONTROL DE TIEMPOS DE PRODUCCION": "Controle de Tempo de Produ\'e7\'e3o",\par
    "DEVOLUCION CONTABILIZADO DOCUMENTOS": "Devolu\'e7\'e3o de Documentos Contabilizados",\par
    "CONFIGURAR PUNTOS REORDEN": "Configurar Pontos de Reordena\'e7\'e3o",\par
    "ADMINISTRAR PUNTOS RECORDEN": "Gerenciar Pontos de Reordena\'e7\'e3o",\par
    "DEVOLUCION CONTABILIZADO RECIBOS": "Devolu\'e7\'e3o de Recibos Contabilizados",\par
    "CANCELAR PEDIDOS": "Cancelar Pedidos",\par
    "PROGRAMAR TRANSPORTE": "Programar Transporte",\par
    "SEGUIMIENTO TRANSPORTE": "Acompanhamento de Transporte",\par
    "CAUSAS": "Causas",\par
    "CAMPOS ESPECIALES": "Campos Especiais",\par
    "CONSULTA INVENTARIO": "Consulta de Invent\'e1rio",\par
    "PURCHASES": "Compras",\par
    "PRODUCTION": "Produ\'e7\'e3o",\par
    "INVENTORY": "Invent\'e1rio",\par
    "BILLING": "Faturamento",\par
    "TRANSPORT": "Transporte",\par
    "QUICK QUERIES": "Consultas R\'e1pidas",\par
    "MASTERS": "Mestres",\par
    "TECHNICAL CONFIGURATION": "Configura\'e7\'e3o T\'e9cnica",\par
    "PURCHASE MOVEMENTS": "Movimentos de Compras",    \par
    "PRODUCTION TIME CONTROL": "Controle de Tempo de Produ\'e7\'e3o",\par
    "RETURN ACCOUNTED DOCUMENTS": "Devolu\'e7\'e3o de Documentos Contabilizados",\par
    "SET REORDER POINTS": "Definir Pontos de Reabastecimento",\par
    "MANAGE REORDER POINTS": "Gerenciar Pontos de Reabastecimento",\par
    "RETURN ACCOUNTED RECEIPTS": "Devolu\'e7\'e3o de Recibos Contabilizados",\par
    "CANCEL ORDERS": "Cancelar Pedidos",\par
    "SCHEDULE TRANSPORT": "Programar Transporte",\par
    "TRANSPORT TRACKING": "Rastreamento de Transporte",\par
    "CAUSES": "Causas",\par
    "SPECIAL FIELDS": "Campos Especiais",\par
    "INVENTORY QUERY": "Consulta de Invent\'e1rio",\par
    "PRODU\'c7\'c3O": "Producci\'f3n",\par
    "INVENT\'c1RIO": "Inventario",\par
    "FATURA\'c7AO": "Facturaci\'f3n",        \par
    "MESTRES": "Mestres",\par
    "CONFIGURA\'c7\'c3O T\'c9CNICA": "Configura\'e7ao T\'e9cnica",\par
    "MOVIMENTOS DE COMPRAS": "Movimentos de Compras",    \par
    "CONTROLE DE TEMPO DE PRODU\'c7AO": "Controle de Tempo de Produ\'e7ao",\par
    "DEVOLU\'c7AO DE DOCUMENTOS CONTABILIZADOS": "Devolu\'e7\'e3o de Documentos Contabilizados",\par
    "CONFIGURAR PONTOS DE REORDENA\'c7\'c3O": "Configurar Pontos de Reordena\'e7\'e3o",\par
    "GERENCIAR PONTOS DE REORDENA\'c7\'c3O": "Gerenciar Pontos de Reordena\'e7\'e3o",\par
    "DEVLOLU\'c7AO DE RECIBOS CONTABILIZADOS": "Devolu\'e7\'e3o de Recibos Contabilizados",        \par
    "ACOMPANHAMENTO DE TRANSPORTE": "Acompanhamento de Transporte",    \par
    "CAMPOS ESPECIAIS": "Campos Especiais",\par
    "CONSULTA DE INVENT\'c1RIO": "Consulta Invent\'e1rio"\par
  \},  \par
  "NO_COMPANIES_FOUND_FOR_THE_IDENTIFICATION_NUMBER_PROVIDED": "Nenhuma empresa encontrada para o n\'famero de identifica\'e7\'e3o fornecido",\par
  "MANAGER_ADMIN":"Administrador admin"\par
\}\par
\par
app.module\par
import \{ TranslateModule, TranslateLoader \} from '@ngx-translate/core';\par
import \{ TranslateHttpLoader \} from '@ngx-translate/http-loader';\par
\par
export function HttpLoaderFactory(http: HttpClient) \{\par
  return new TranslateHttpLoader(http, './assets/i18n/', '.json');\par
\}\par
\par
En imports:\par
TranslateModule.forRoot(\{\par
      loader: \{\par
        provide: TranslateLoader,\par
        useFactory: HttpLoaderFactory,\par
        deps: [HttpClient]\par
      \}\par
    \}),\par
\par
app.component.ts\par
import \{ LanguageServiceService \} from '../app/services/language-service.service';\par
import \{ LanguageChangeService \} from '../app/services/language-change-service'; \par
\par
xport class AppComponent \{\par
  title = 'kontrolar-cloud-pwa';\par
  isAuthenticated: boolean = false;\par
\par
  constructor(\par
    private _swUpdate: SwUpdate,    \par
    private languageService: LanguageServiceService,\par
    private userService: UserService,\par
    private languageChangeService: LanguageChangeService \par
  ) \{\}\par
\par
  setLanguage(event: Event) \{\par
    //console.log('setLanguage en app.component ');\par
    const selectElement = event.target as HTMLSelectElement;\par
    const language = selectElement.value;\par
    this.languageService.setLanguage(language);\par
    this.languageChangeService.changeLanguage(language); // Notifica el cambio de idioma\par
  \}\par
\par
  ngOnInit(): void \{\par
    this.checkForUpdates();\par
    this.isAuthenticated = this.userService.IsAuthenticated();\par
    this.isAuthenticated = true;\par
  \}\par
\par
app.component.html\par
<div class="container-fluid">\par
  <div class="row">\par
\par
    <div class="col-3 text-white" *ngIf="isAuthenticated == true" id="side-bar">\par
      <app-sidebar-menu></app-sidebar-menu>\par
    </div>\par
\par
    <div class="col" id="right-side">\par
\par
      <nav class="navbar navbar-expand-lg navbar-light bg-light">\par
        <div class="container-fluid">\par
          <div class="ms-auto">\par
            <select class="form-select" (change)="setLanguage($event)">\par
              <option value="es-CO">Espa\'f1ol</option>\par
              <option value="en-US">English</option>\par
              <option value="pt-PT">Portugu\'eas</option>\par
            </select>\par
          </div>\par
        </div>\par
      </nav>\par
\par
      <main>\par
        <router-outlet></router-outlet>\par
      </main>\par
\par
    </div><!-- right-side -->\par
\par
  </div><!-- row -->\par
</div>\par
\par
sidebar-menu.component.ts\par
import \{ TranslateService \} from '@ngx-translate/core';\par
import \{ LanguageChangeService \} from '../../services/language-change-service';\par
\par
export class SidebarMenuComponent implements OnInit \{\par
  options: any;\par
  iobjOpcionMovil: iObjOpcionMovil = \{\par
    listaOpcionesMoviles: [] as iMenu[],  // Inicializando como array vac\'edo de iMenu\par
    listaModulos: [] as iModulo[]\par
  \};\par
  filteredOptions: \{ [key: number]: iMenu[] \} = \{\};\par
  selectedCompany: string = '';\par
\par
  constructor(\par
    private userService: UserService,\par
    private localStorageService: LocalStorageService,\par
    private translate: TranslateService,\par
    private languageChangeService: LanguageChangeService\par
  ) \{ \}\par
\par
  ngOnInit(): void \{\par
    const idUser = 1;\par
    const idProfile = 1;\par
\par
    this.userService.GetOptionsByProfile(idUser, idProfile).subscribe(\par
      (data) => \{        \par
        this.iobjOpcionMovil = data;                \par
        this.filterOptions();\par
        //console.log('this.iobjOpcionMovil: ', this.iobjOpcionMovil);\par
        this.selectedCompany = this.localStorageService.getData('selectedCompany');        \par
      \},\par
      (error) => \{\par
        console.error('Error fetching options', error);\par
      \}\par
    );\par
    //console.log('this.iobjOpcionMovil: ', this.iobjOpcionMovil);\par
    // Escucha el cambio de idioma\par
    this.languageChangeService.currentLanguage.subscribe(language => \{\par
      this.translateModulesAndOptions();\par
    \});\par
  \}\par
\par
  translateModulesAndOptions(): void \{\par
    if (this.iobjOpcionMovil.listaModulos && this.iobjOpcionMovil.listaModulos.length > 0) \{\par
      this.iobjOpcionMovil.listaModulos.forEach(modulo => \{\par
        const key = `MODULES.$\{modulo.nombreModulo.toUpperCase()\}`;\par
        console.log('key ', key);\par
        this.translate.get(key).subscribe((translatedName: string) => \{\par
          console.log('translatedName ', translatedName);\par
          console.log('translatedName !== key ', translatedName !== key);\par
          if (translatedName !== key) \{ // Solo actualizar si se encuentra una traducci\'f3n\par
            modulo.nombreModulo = translatedName;\par
          \}\par
        \});\par
      \});\par
    \}\par
\par
    if (this.iobjOpcionMovil.listaOpcionesMoviles && this.iobjOpcionMovil.listaOpcionesMoviles.length > 0) \{\par
      console.log('this.iobjOpcionMovil.listaOpcionesMoviles ', this.iobjOpcionMovil.listaOpcionesMoviles);\par
      this.iobjOpcionMovil.listaOpcionesMoviles.forEach(opcion => \{\par
        const key = `MODULES.$\{opcion.nombre.toUpperCase()\}`;\par
        this.translate.get(key).subscribe((translatedName: string) => \{\par
          // Solo actualizar si se encuentra una traducci\'f3n\par
          if (translatedName !== key) \{ \par
            opcion.nombre = translatedName;\par
          \}\par
        \});\par
      \});\par
    \}\par
  \}\par
\par
  filterOptions(): void \{\par
    this.iobjOpcionMovil.listaModulos.forEach(modulo => \{      \par
      // Eliminar 'MODULES.' del nombre del m\'f3dulo\par
      modulo.nombreModulo = modulo.nombreModulo.replace('MODULES.', '');      \par
      this.filteredOptions[modulo.idModulo] = this.iobjOpcionMovil.listaOpcionesMoviles.filter(option => option.idModulo === modulo.idModulo);\par
      //console.log(`M\'f3dulo procesado: $\{modulo.nombreModulo\}, Icono: $\{modulo.iconoModulo\}`);\par
    \});\par
  \}\par
\par
  getFilteredOptions(moduloId: number): iMenu[] \{\par
    return (this.filteredOptions[moduloId] || []).map(option => (\{\par
      ...option,\par
      nombre: option.nombre.replace('MODULES.', '')\par
    \}));\par
  \}\par
\par
  getSubMenuOptions(moduloId: number, parentId: number): iMenu[] \{\par
    return this.iobjOpcionMovil.listaOpcionesMoviles.filter(option => option.idModulo === moduloId && option.idPadre === parentId);\par
  \}\par
\}\par
\par
sidebar-menu.component.html\par
<div>\par
  <img src="../../../assets/img/LOGO_FONDO_TRANSPARENTE2.png" alt="Image Description" class="img-fluid mb-3">   \par
</div>\par
\par
<div *ngIf="iobjOpcionMovil">\par
\par
  <div class="dropdown custom-dropdown">    \par
    <button class="btn btn-secondary dropdown-toggle custom-dropdown-button" \par
      type="button" \par
      id="dropdownMenuButton"  \par
      data-bs-toggle="dropdown" \par
      aria-expanded="false"\par
      translate>\par
      <i class="fa-solid fa-folder"></i>\par
      MANAGER_ADMIN\par
    </button>\par
    <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">\par
      <li><a class="dropdown-item" href="#" translate><i class="fa-solid fa-city"></i> CHANGE_COMPANY</a></li>\par
      <li><a class="dropdown-item" href="#" translate><i class="fa-solid fa-key"></i> CHANGE_PASSWORD</a></li>\par
      <li><hr class="dropdown-divider"></li>\par
      <li><a class="dropdown-item" href="#" translate><i class="fa-solid fa-circle-xmark"></i> CLOSE_SESSION</a></li>\par
    </ul>\par
    <div class="selected-company">\{\{selectedCompany\}\}</div>  \par
  </div>  \par
\par
  <div class="accordion" id="accordionExample" style="margin: 5px;">\par
    <div *ngFor="let modulo of iobjOpcionMovil.listaModulos; let i = index" class="accordion-item">            \par
      <h2 class="accordion-header purple-background" id="heading\{\{ i \}\}">\par
\par
        <button class="accordion-button collapsed \{\{ modulo.claseModulo \}\}" \par
          type="button" \par
          data-bs-toggle="collapse" \par
          [attr.data-bs-target]="'#collapse' + i" \par
          aria-expanded="false" \par
          [attr.aria-controls]="'collapse' + i"\par
          [ngStyle]="\{'background-color': modulo.colorModule\}"\par
        >\par
          <i [class]="modulo.iconoModulo"></i>      \par
          <span style="margin-left: 30px;">\{\{ modulo.nombreModulo \}\}</span>\par
        </button>\par
      </h2>\par
      \par
      <div id="collapse\{\{ i \}\}" class="accordion-collapse collapse" [attr.aria-labelledby]="'heading' + i" data-bs-parent="#accordionExample">        \par
        <div class="accordion-body">\par
          <table class="table table-hover">\par
            <tbody>\par
              <ng-container *ngFor="let padre of getFilteredOptions(modulo.idModulo)">\par
                <tr *ngIf="padre.tieneSubMenu">\par
                  <td>\par
\par
                    <a data-bs-toggle="collapse" [attr.href]="'#item' + i" aria-expanded="false" [attr.aria-controls]="'item' + i">\par
                      <span class="\{\{ padre.icono \}\}"></span>\par
                      <span style="margin-left: 10px;">\{\{ padre.nombre \}\}</span>\par
                    </a>\par
\par
                    <div class="collapse" [attr.id]="'item' + i">\par
                      <div class="card card-body">\par
                        <ng-container *ngFor="let hijo of getSubMenuOptions(modulo.idModulo, padre.idOpcion)">\par
                          <div class="ms-3">\par
                            <br>\par
                            <span class="\{\{ hijo.icono \}\}"></span>\par
                            <a [routerLink]="['/', hijo.controlador, hijo.accion, \{ Id: modulo.idModulo, IdOpcion: hijo.idOpcion \}]">&nbsp;\{\{ hijo.nombre \}\}</a>\par
                          </div>\par
                        </ng-container>\par
                      </div>\par
\par
                    </div>\par
                  </td>\par
                </tr>\par
\par
                <tr *ngIf="!padre.tieneSubMenu && padre.idPadre === 0">\par
                  <td>\par
                    <span class="\{\{ padre.icono \}\}"></span>\par
                    <a [routerLink]="['/', padre.controlador, padre.accion, \{ Id: modulo.idModulo, IdOpcion: padre.idOpcion \}]">&nbsp;\{\{ padre.nombre \}\}</a>\par
                  </td>\par
                </tr>\par
                \par
              </ng-container>\par
            </tbody>\par
          </table>\par
        </div>\par
      </div>\par
    </div>\par
  </div>\par
</div>\par
\par
language-service.service.ts\par
import \{ Injectable \} from '@angular/core';\par
import \{ Location \} from '@angular/common';\par
import \{ TranslateService \} from '@ngx-translate/core';\par
\par
@Injectable(\{\par
  providedIn: 'root'\par
\})\par
export class LanguageServiceService \{\par
\par
  constructor(private translate: TranslateService, private location: Location) \{    \par
  \}\par
\par
  setLanguage(language: string) \{\par
    //console.log("language al llegar al servicio ", language);\par
    this.translate.use(language).subscribe(() => \{\par
      this.location.replaceState(this.location.path(), '', \{ lang: language \});\par
    \});\par
  \}\par
\}\par
\par
language-change.service.ts\par
import \{ Injectable \} from '@angular/core';\par
import \{ BehaviorSubject \} from 'rxjs';\par
\par
@Injectable(\{\par
  providedIn: 'root'\par
\})\par
export class LanguageChangeService \{\par
  private languageSource = new BehaviorSubject<string>('es-CO');\par
  currentLanguage = this.languageSource.asObservable();\par
\par
  changeLanguage(language: string) \{\par
    //console.log('language ', language);\par
    this.languageSource.next(language);\par
    //sconsole.log('this.languageSource ', this.languageSource);\par
  \}\par
\}\par
\par
////////////////\par
\par
\par
\par
////////////////\par
\par
\par
\par
////////////////\par
\par
\par
\par
////////////////\par
\par
\par
\par
\par
\par
}
 